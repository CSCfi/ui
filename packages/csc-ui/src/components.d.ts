/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface CButton {
    'color': string;
    'disabled': boolean;
    'fixed': boolean;
    'icon': string;
    'noRadius': boolean;
  }
  interface CCard {}
  interface CCol {}
  interface CContainer {}
  interface CRow {}
  interface CSelect {
    'label': string;
    'name': string;
    'value': any;
  }
  interface CSpacer {}
  interface CTab {
    'active': boolean;
    'color': string;
    'disabled': boolean;
    'icon': string;
    'label': string;
    'noRadius': boolean;
  }
  interface CTextField {
    'label': string;
    'name': string;
    'number': boolean;
    'value': string;
  }
  interface CTitle {}
  interface CToggle {
    'active': boolean;
    'color': string;
    'description': string;
    'fit': boolean;
    'fixed': boolean;
    'subtitle': string;
  }
}

declare global {


  interface HTMLCButtonElement extends Components.CButton, HTMLStencilElement {}
  var HTMLCButtonElement: {
    prototype: HTMLCButtonElement;
    new (): HTMLCButtonElement;
  };

  interface HTMLCCardElement extends Components.CCard, HTMLStencilElement {}
  var HTMLCCardElement: {
    prototype: HTMLCCardElement;
    new (): HTMLCCardElement;
  };

  interface HTMLCColElement extends Components.CCol, HTMLStencilElement {}
  var HTMLCColElement: {
    prototype: HTMLCColElement;
    new (): HTMLCColElement;
  };

  interface HTMLCContainerElement extends Components.CContainer, HTMLStencilElement {}
  var HTMLCContainerElement: {
    prototype: HTMLCContainerElement;
    new (): HTMLCContainerElement;
  };

  interface HTMLCRowElement extends Components.CRow, HTMLStencilElement {}
  var HTMLCRowElement: {
    prototype: HTMLCRowElement;
    new (): HTMLCRowElement;
  };

  interface HTMLCSelectElement extends Components.CSelect, HTMLStencilElement {}
  var HTMLCSelectElement: {
    prototype: HTMLCSelectElement;
    new (): HTMLCSelectElement;
  };

  interface HTMLCSpacerElement extends Components.CSpacer, HTMLStencilElement {}
  var HTMLCSpacerElement: {
    prototype: HTMLCSpacerElement;
    new (): HTMLCSpacerElement;
  };

  interface HTMLCTabElement extends Components.CTab, HTMLStencilElement {}
  var HTMLCTabElement: {
    prototype: HTMLCTabElement;
    new (): HTMLCTabElement;
  };

  interface HTMLCTextFieldElement extends Components.CTextField, HTMLStencilElement {}
  var HTMLCTextFieldElement: {
    prototype: HTMLCTextFieldElement;
    new (): HTMLCTextFieldElement;
  };

  interface HTMLCTitleElement extends Components.CTitle, HTMLStencilElement {}
  var HTMLCTitleElement: {
    prototype: HTMLCTitleElement;
    new (): HTMLCTitleElement;
  };

  interface HTMLCToggleElement extends Components.CToggle, HTMLStencilElement {}
  var HTMLCToggleElement: {
    prototype: HTMLCToggleElement;
    new (): HTMLCToggleElement;
  };
  interface HTMLElementTagNameMap {
    'c-button': HTMLCButtonElement;
    'c-card': HTMLCCardElement;
    'c-col': HTMLCColElement;
    'c-container': HTMLCContainerElement;
    'c-row': HTMLCRowElement;
    'c-select': HTMLCSelectElement;
    'c-spacer': HTMLCSpacerElement;
    'c-tab': HTMLCTabElement;
    'c-text-field': HTMLCTextFieldElement;
    'c-title': HTMLCTitleElement;
    'c-toggle': HTMLCToggleElement;
  }
}

declare namespace LocalJSX {
  interface CButton {
    'color'?: string;
    'disabled'?: boolean;
    'fixed'?: boolean;
    'icon'?: string;
    'noRadius'?: boolean;
  }
  interface CCard {}
  interface CCol {}
  interface CContainer {}
  interface CRow {}
  interface CSelect {
    'label'?: string;
    'name'?: string;
    'value'?: any;
  }
  interface CSpacer {}
  interface CTab {
    'active'?: boolean;
    'color'?: string;
    'disabled'?: boolean;
    'icon'?: string;
    'label'?: string;
    'noRadius'?: boolean;
  }
  interface CTextField {
    'label'?: string;
    'name'?: string;
    'number'?: boolean;
    'value'?: string;
  }
  interface CTitle {}
  interface CToggle {
    'active'?: boolean;
    'color'?: string;
    'description'?: string;
    'fit'?: boolean;
    'fixed'?: boolean;
    'subtitle'?: string;
  }

  interface IntrinsicElements {
    'c-button': CButton;
    'c-card': CCard;
    'c-col': CCol;
    'c-container': CContainer;
    'c-row': CRow;
    'c-select': CSelect;
    'c-spacer': CSpacer;
    'c-tab': CTab;
    'c-text-field': CTextField;
    'c-title': CTitle;
    'c-toggle': CToggle;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'c-button': LocalJSX.CButton & JSXBase.HTMLAttributes<HTMLCButtonElement>;
      'c-card': LocalJSX.CCard & JSXBase.HTMLAttributes<HTMLCCardElement>;
      'c-col': LocalJSX.CCol & JSXBase.HTMLAttributes<HTMLCColElement>;
      'c-container': LocalJSX.CContainer & JSXBase.HTMLAttributes<HTMLCContainerElement>;
      'c-row': LocalJSX.CRow & JSXBase.HTMLAttributes<HTMLCRowElement>;
      'c-select': LocalJSX.CSelect & JSXBase.HTMLAttributes<HTMLCSelectElement>;
      'c-spacer': LocalJSX.CSpacer & JSXBase.HTMLAttributes<HTMLCSpacerElement>;
      'c-tab': LocalJSX.CTab & JSXBase.HTMLAttributes<HTMLCTabElement>;
      'c-text-field': LocalJSX.CTextField & JSXBase.HTMLAttributes<HTMLCTextFieldElement>;
      'c-title': LocalJSX.CTitle & JSXBase.HTMLAttributes<HTMLCTitleElement>;
      'c-toggle': LocalJSX.CToggle & JSXBase.HTMLAttributes<HTMLCToggleElement>;
    }
  }
}


