'use client';

/**
 * This file was automatically generated by the Stencil React Output Target.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 */

/* eslint-disable */

import { type CButtonCustomEvent, type CDataTableCustomEvent, type CPaginationCustomEvent, type CPaginationOptions, type CTabCustomEvent, type CToastCustomEvent, type CToastMessage } from "@cscfi/csc-ui";
import { CAccordionItem as CAccordionItemElement, defineCustomElement as defineCAccordionItem } from "@cscfi/csc-ui/components/c-accordion-item.js";
import { CAccordion as CAccordionElement, defineCustomElement as defineCAccordion } from "@cscfi/csc-ui/components/c-accordion.js";
import { CAlert as CAlertElement, defineCustomElement as defineCAlert } from "@cscfi/csc-ui/components/c-alert.js";
import { CAutocomplete as CAutocompleteElement, defineCustomElement as defineCAutocomplete } from "@cscfi/csc-ui/components/c-autocomplete.js";
import { CBadge as CBadgeElement, defineCustomElement as defineCBadge } from "@cscfi/csc-ui/components/c-badge.js";
import { CButton as CButtonElement, defineCustomElement as defineCButton } from "@cscfi/csc-ui/components/c-button.js";
import { CCardActions as CCardActionsElement, defineCustomElement as defineCCardActions } from "@cscfi/csc-ui/components/c-card-actions.js";
import { CCardContent as CCardContentElement, defineCustomElement as defineCCardContent } from "@cscfi/csc-ui/components/c-card-content.js";
import { CCardTitle as CCardTitleElement, defineCustomElement as defineCCardTitle } from "@cscfi/csc-ui/components/c-card-title.js";
import { CCard as CCardElement, defineCustomElement as defineCCard } from "@cscfi/csc-ui/components/c-card.js";
import { CCheckbox as CCheckboxElement, defineCustomElement as defineCCheckbox } from "@cscfi/csc-ui/components/c-checkbox.js";
import { CCscLogo as CCscLogoElement, defineCustomElement as defineCCscLogo } from "@cscfi/csc-ui/components/c-csc-logo.js";
import { CDataTable as CDataTableElement, defineCustomElement as defineCDataTable } from "@cscfi/csc-ui/components/c-data-table.js";
import { CDropdown as CDropdownElement, defineCustomElement as defineCDropdown } from "@cscfi/csc-ui/components/c-dropdown.js";
import { CIconButton as CIconButtonElement, defineCustomElement as defineCIconButton } from "@cscfi/csc-ui/components/c-icon-button.js";
import { CIcon as CIconElement, defineCustomElement as defineCIcon } from "@cscfi/csc-ui/components/c-icon.js";
import { CInput as CInputElement, defineCustomElement as defineCInput } from "@cscfi/csc-ui/components/c-input.js";
import { CLink as CLinkElement, defineCustomElement as defineCLink } from "@cscfi/csc-ui/components/c-link.js";
import { CListItemTitle as CListItemTitleElement, defineCustomElement as defineCListItemTitle } from "@cscfi/csc-ui/components/c-list-item-title.js";
import { CListItem as CListItemElement, defineCustomElement as defineCListItem } from "@cscfi/csc-ui/components/c-list-item.js";
import { CList as CListElement, defineCustomElement as defineCList } from "@cscfi/csc-ui/components/c-list.js";
import { CLoader as CLoaderElement, defineCustomElement as defineCLoader } from "@cscfi/csc-ui/components/c-loader.js";
import { CLoginButton as CLoginButtonElement, defineCustomElement as defineCLoginButton } from "@cscfi/csc-ui/components/c-login-button.js";
import { CLoginButtons as CLoginButtonsElement, defineCustomElement as defineCLoginButtons } from "@cscfi/csc-ui/components/c-login-buttons.js";
import { CLoginCardActions as CLoginCardActionsElement, defineCustomElement as defineCLoginCardActions } from "@cscfi/csc-ui/components/c-login-card-actions.js";
import { CLoginCardContent as CLoginCardContentElement, defineCustomElement as defineCLoginCardContent } from "@cscfi/csc-ui/components/c-login-card-content.js";
import { CLoginCardTitle as CLoginCardTitleElement, defineCustomElement as defineCLoginCardTitle } from "@cscfi/csc-ui/components/c-login-card-title.js";
import { CLoginCard as CLoginCardElement, defineCustomElement as defineCLoginCard } from "@cscfi/csc-ui/components/c-login-card.js";
import { CMain as CMainElement, defineCustomElement as defineCMain } from "@cscfi/csc-ui/components/c-main.js";
import { CMenuItems as CMenuItemsElement, defineCustomElement as defineCMenuItems } from "@cscfi/csc-ui/components/c-menu-items.js";
import { CMenu as CMenuElement, defineCustomElement as defineCMenu } from "@cscfi/csc-ui/components/c-menu.js";
import { CMessage as CMessageElement, defineCustomElement as defineCMessage } from "@cscfi/csc-ui/components/c-message.js";
import { CModal as CModalElement, defineCustomElement as defineCModal } from "@cscfi/csc-ui/components/c-modal.js";
import { CNavigationButton as CNavigationButtonElement, defineCustomElement as defineCNavigationButton } from "@cscfi/csc-ui/components/c-navigation-button.js";
import { COptionValue as COptionValueElement, defineCustomElement as defineCOptionValue } from "@cscfi/csc-ui/components/c-option-value.js";
import { COption as COptionElement, defineCustomElement as defineCOption } from "@cscfi/csc-ui/components/c-option.js";
import { COtpInput as COtpInputElement, defineCustomElement as defineCOtpInput } from "@cscfi/csc-ui/components/c-otp-input.js";
import { CPage as CPageElement, defineCustomElement as defineCPage } from "@cscfi/csc-ui/components/c-page.js";
import { CPagination as CPaginationElement, defineCustomElement as defineCPagination } from "@cscfi/csc-ui/components/c-pagination.js";
import { CProgressBar as CProgressBarElement, defineCustomElement as defineCProgressBar } from "@cscfi/csc-ui/components/c-progress-bar.js";
import { CRadioGroup as CRadioGroupElement, defineCustomElement as defineCRadioGroup } from "@cscfi/csc-ui/components/c-radio-group.js";
import { CRadio as CRadioElement, defineCustomElement as defineCRadio } from "@cscfi/csc-ui/components/c-radio.js";
import { CRipple as CRippleElement, defineCustomElement as defineCRipple } from "@cscfi/csc-ui/components/c-ripple.js";
import { CRow as CRowElement, defineCustomElement as defineCRow } from "@cscfi/csc-ui/components/c-row.js";
import { CSelect as CSelectElement, defineCustomElement as defineCSelect } from "@cscfi/csc-ui/components/c-select.js";
import { CSideNavigationItem as CSideNavigationItemElement, defineCustomElement as defineCSideNavigationItem } from "@cscfi/csc-ui/components/c-side-navigation-item.js";
import { CSideNavigationTitle as CSideNavigationTitleElement, defineCustomElement as defineCSideNavigationTitle } from "@cscfi/csc-ui/components/c-side-navigation-title.js";
import { CSideNavigation as CSideNavigationElement, defineCustomElement as defineCSideNavigation } from "@cscfi/csc-ui/components/c-side-navigation.js";
import { CSlider as CSliderElement, defineCustomElement as defineCSlider } from "@cscfi/csc-ui/components/c-slider.js";
import { CSpacer as CSpacerElement, defineCustomElement as defineCSpacer } from "@cscfi/csc-ui/components/c-spacer.js";
import { CSpinner as CSpinnerElement, defineCustomElement as defineCSpinner } from "@cscfi/csc-ui/components/c-spinner.js";
import { CStatus as CStatusElement, defineCustomElement as defineCStatus } from "@cscfi/csc-ui/components/c-status.js";
import { CStep as CStepElement, defineCustomElement as defineCStep } from "@cscfi/csc-ui/components/c-step.js";
import { CSteps as CStepsElement, defineCustomElement as defineCSteps } from "@cscfi/csc-ui/components/c-steps.js";
import { CSubNavigationItem as CSubNavigationItemElement, defineCustomElement as defineCSubNavigationItem } from "@cscfi/csc-ui/components/c-sub-navigation-item.js";
import { CSwiperTab as CSwiperTabElement, defineCustomElement as defineCSwiperTab } from "@cscfi/csc-ui/components/c-swiper-tab.js";
import { CSwiper as CSwiperElement, defineCustomElement as defineCSwiper } from "@cscfi/csc-ui/components/c-swiper.js";
import { CSwitch as CSwitchElement, defineCustomElement as defineCSwitch } from "@cscfi/csc-ui/components/c-switch.js";
import { CTabButtons as CTabButtonsElement, defineCustomElement as defineCTabButtons } from "@cscfi/csc-ui/components/c-tab-buttons.js";
import { CTabItem as CTabItemElement, defineCustomElement as defineCTabItem } from "@cscfi/csc-ui/components/c-tab-item.js";
import { CTabItems as CTabItemsElement, defineCustomElement as defineCTabItems } from "@cscfi/csc-ui/components/c-tab-items.js";
import { CTab as CTabElement, defineCustomElement as defineCTab } from "@cscfi/csc-ui/components/c-tab.js";
import { CTable as CTableElement, defineCustomElement as defineCTable } from "@cscfi/csc-ui/components/c-table.js";
import { CTabs as CTabsElement, defineCustomElement as defineCTabs } from "@cscfi/csc-ui/components/c-tabs.js";
import { CTag as CTagElement, defineCustomElement as defineCTag } from "@cscfi/csc-ui/components/c-tag.js";
import { CTags as CTagsElement, defineCustomElement as defineCTags } from "@cscfi/csc-ui/components/c-tags.js";
import { CTextField as CTextFieldElement, defineCustomElement as defineCTextField } from "@cscfi/csc-ui/components/c-text-field.js";
import { CToast as CToastElement, defineCustomElement as defineCToast } from "@cscfi/csc-ui/components/c-toast.js";
import { CToasts as CToastsElement, defineCustomElement as defineCToasts } from "@cscfi/csc-ui/components/c-toasts.js";
import { CToolbar as CToolbarElement, defineCustomElement as defineCToolbar } from "@cscfi/csc-ui/components/c-toolbar.js";
import type { EventName, StencilReactComponent } from '@stencil/react-output-target/runtime';
import { createComponent } from '@stencil/react-output-target/runtime';
import React from 'react';

type CAccordionEvents = { onChangeValue: EventName<CustomEvent<number | string>> };

export const CAccordion: StencilReactComponent<CAccordionElement, CAccordionEvents> = /*@__PURE__*/ createComponent<CAccordionElement, CAccordionEvents>({
    tagName: 'c-accordion',
    elementClass: CAccordionElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onChangeValue: 'changeValue' } as CAccordionEvents,
    defineCustomElement: defineCAccordion
});

type CAccordionItemEvents = { onItemChange: EventName<CustomEvent<any>> };

export const CAccordionItem: StencilReactComponent<CAccordionItemElement, CAccordionItemEvents> = /*@__PURE__*/ createComponent<CAccordionItemElement, CAccordionItemEvents>({
    tagName: 'c-accordion-item',
    elementClass: CAccordionItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onItemChange: 'itemChange' } as CAccordionItemEvents,
    defineCustomElement: defineCAccordionItem
});

type CAlertEvents = NonNullable<unknown>;

export const CAlert: StencilReactComponent<CAlertElement, CAlertEvents> = /*@__PURE__*/ createComponent<CAlertElement, CAlertEvents>({
    tagName: 'c-alert',
    elementClass: CAlertElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CAlertEvents,
    defineCustomElement: defineCAlert
});

type CAutocompleteEvents = {
    onChangeQuery: EventName<CustomEvent<any>>,
    onChangeValue: EventName<CustomEvent<any>>
};

export const CAutocomplete: StencilReactComponent<CAutocompleteElement, CAutocompleteEvents> = /*@__PURE__*/ createComponent<CAutocompleteElement, CAutocompleteEvents>({
    tagName: 'c-autocomplete',
    elementClass: CAutocompleteElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onChangeQuery: 'changeQuery',
        onChangeValue: 'changeValue'
    } as CAutocompleteEvents,
    defineCustomElement: defineCAutocomplete
});

type CBadgeEvents = NonNullable<unknown>;

export const CBadge: StencilReactComponent<CBadgeElement, CBadgeEvents> = /*@__PURE__*/ createComponent<CBadgeElement, CBadgeEvents>({
    tagName: 'c-badge',
    elementClass: CBadgeElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CBadgeEvents,
    defineCustomElement: defineCBadge
});

type CButtonEvents = {
    onTabChange: EventName<CButtonCustomEvent<{
        value: number | string;
        element: HTMLCButtonElement;
    }>>,
    onTabFocus: EventName<CustomEvent<number | string>>
};

export const CButton: StencilReactComponent<CButtonElement, CButtonEvents> = /*@__PURE__*/ createComponent<CButtonElement, CButtonEvents>({
    tagName: 'c-button',
    elementClass: CButtonElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onTabChange: 'tabChange',
        onTabFocus: 'tabFocus'
    } as CButtonEvents,
    defineCustomElement: defineCButton
});

type CCardEvents = NonNullable<unknown>;

export const CCard: StencilReactComponent<CCardElement, CCardEvents> = /*@__PURE__*/ createComponent<CCardElement, CCardEvents>({
    tagName: 'c-card',
    elementClass: CCardElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CCardEvents,
    defineCustomElement: defineCCard
});

type CCardActionsEvents = NonNullable<unknown>;

export const CCardActions: StencilReactComponent<CCardActionsElement, CCardActionsEvents> = /*@__PURE__*/ createComponent<CCardActionsElement, CCardActionsEvents>({
    tagName: 'c-card-actions',
    elementClass: CCardActionsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CCardActionsEvents,
    defineCustomElement: defineCCardActions
});

type CCardContentEvents = NonNullable<unknown>;

export const CCardContent: StencilReactComponent<CCardContentElement, CCardContentEvents> = /*@__PURE__*/ createComponent<CCardContentElement, CCardContentEvents>({
    tagName: 'c-card-content',
    elementClass: CCardContentElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CCardContentEvents,
    defineCustomElement: defineCCardContent
});

type CCardTitleEvents = NonNullable<unknown>;

export const CCardTitle: StencilReactComponent<CCardTitleElement, CCardTitleEvents> = /*@__PURE__*/ createComponent<CCardTitleElement, CCardTitleEvents>({
    tagName: 'c-card-title',
    elementClass: CCardTitleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CCardTitleEvents,
    defineCustomElement: defineCCardTitle
});

type CCheckboxEvents = { onChangeValue: EventName<CustomEvent<any>> };

export const CCheckbox: StencilReactComponent<CCheckboxElement, CCheckboxEvents> = /*@__PURE__*/ createComponent<CCheckboxElement, CCheckboxEvents>({
    tagName: 'c-checkbox',
    elementClass: CCheckboxElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onChangeValue: 'changeValue' } as CCheckboxEvents,
    defineCustomElement: defineCCheckbox
});

type CCscLogoEvents = NonNullable<unknown>;

export const CCscLogo: StencilReactComponent<CCscLogoElement, CCscLogoEvents> = /*@__PURE__*/ createComponent<CCscLogoElement, CCscLogoEvents>({
    tagName: 'c-csc-logo',
    elementClass: CCscLogoElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CCscLogoEvents,
    defineCustomElement: defineCCscLogo
});

type CDataTableEvents = {
    onPaginate: EventName<CDataTableCustomEvent<CPaginationOptions>>,
    onExpand: EventName<CustomEvent<any>>,
    onSort: EventName<CustomEvent<any>>,
    onSelection: EventName<CustomEvent<any>>
};

export const CDataTable: StencilReactComponent<CDataTableElement, CDataTableEvents> = /*@__PURE__*/ createComponent<CDataTableElement, CDataTableEvents>({
    tagName: 'c-data-table',
    elementClass: CDataTableElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onPaginate: 'paginate',
        onExpand: 'expand',
        onSort: 'sort',
        onSelection: 'selection'
    } as CDataTableEvents,
    defineCustomElement: defineCDataTable
});

type CDropdownEvents = {
    onSelectOption: EventName<CustomEvent<any>>,
    onDropdownStateChange: EventName<CustomEvent<boolean>>
};

export const CDropdown: StencilReactComponent<CDropdownElement, CDropdownEvents> = /*@__PURE__*/ createComponent<CDropdownElement, CDropdownEvents>({
    tagName: 'c-dropdown',
    elementClass: CDropdownElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onSelectOption: 'selectOption',
        onDropdownStateChange: 'dropdownStateChange'
    } as CDropdownEvents,
    defineCustomElement: defineCDropdown
});

type CIconEvents = NonNullable<unknown>;

export const CIcon: StencilReactComponent<CIconElement, CIconEvents> = /*@__PURE__*/ createComponent<CIconElement, CIconEvents>({
    tagName: 'c-icon',
    elementClass: CIconElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CIconEvents,
    defineCustomElement: defineCIcon
});

type CIconButtonEvents = NonNullable<unknown>;

export const CIconButton: StencilReactComponent<CIconButtonElement, CIconButtonEvents> = /*@__PURE__*/ createComponent<CIconButtonElement, CIconButtonEvents>({
    tagName: 'c-icon-button',
    elementClass: CIconButtonElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CIconButtonEvents,
    defineCustomElement: defineCIconButton
});

type CInputEvents = {
    onChangeValue: EventName<CustomEvent<any>>,
    onItemClick: EventName<CustomEvent<any>>,
    onDropdownClose: EventName<CustomEvent<any>>
};

export const CInput: StencilReactComponent<CInputElement, CInputEvents> = /*@__PURE__*/ createComponent<CInputElement, CInputEvents>({
    tagName: 'c-input',
    elementClass: CInputElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onChangeValue: 'changeValue',
        onItemClick: 'itemClick',
        onDropdownClose: 'dropdownClose'
    } as CInputEvents,
    defineCustomElement: defineCInput
});

type CLinkEvents = NonNullable<unknown>;

export const CLink: StencilReactComponent<CLinkElement, CLinkEvents> = /*@__PURE__*/ createComponent<CLinkElement, CLinkEvents>({
    tagName: 'c-link',
    elementClass: CLinkElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CLinkEvents,
    defineCustomElement: defineCLink
});

type CListEvents = NonNullable<unknown>;

export const CList: StencilReactComponent<CListElement, CListEvents> = /*@__PURE__*/ createComponent<CListElement, CListEvents>({
    tagName: 'c-list',
    elementClass: CListElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CListEvents,
    defineCustomElement: defineCList
});

type CListItemEvents = NonNullable<unknown>;

export const CListItem: StencilReactComponent<CListItemElement, CListItemEvents> = /*@__PURE__*/ createComponent<CListItemElement, CListItemEvents>({
    tagName: 'c-list-item',
    elementClass: CListItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CListItemEvents,
    defineCustomElement: defineCListItem
});

type CListItemTitleEvents = NonNullable<unknown>;

export const CListItemTitle: StencilReactComponent<CListItemTitleElement, CListItemTitleEvents> = /*@__PURE__*/ createComponent<CListItemTitleElement, CListItemTitleEvents>({
    tagName: 'c-list-item-title',
    elementClass: CListItemTitleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CListItemTitleEvents,
    defineCustomElement: defineCListItemTitle
});

type CLoaderEvents = NonNullable<unknown>;

export const CLoader: StencilReactComponent<CLoaderElement, CLoaderEvents> = /*@__PURE__*/ createComponent<CLoaderElement, CLoaderEvents>({
    tagName: 'c-loader',
    elementClass: CLoaderElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CLoaderEvents,
    defineCustomElement: defineCLoader
});

type CLoginButtonEvents = NonNullable<unknown>;

export const CLoginButton: StencilReactComponent<CLoginButtonElement, CLoginButtonEvents> = /*@__PURE__*/ createComponent<CLoginButtonElement, CLoginButtonEvents>({
    tagName: 'c-login-button',
    elementClass: CLoginButtonElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CLoginButtonEvents,
    defineCustomElement: defineCLoginButton
});

type CLoginButtonsEvents = NonNullable<unknown>;

export const CLoginButtons: StencilReactComponent<CLoginButtonsElement, CLoginButtonsEvents> = /*@__PURE__*/ createComponent<CLoginButtonsElement, CLoginButtonsEvents>({
    tagName: 'c-login-buttons',
    elementClass: CLoginButtonsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CLoginButtonsEvents,
    defineCustomElement: defineCLoginButtons
});

type CLoginCardEvents = NonNullable<unknown>;

export const CLoginCard: StencilReactComponent<CLoginCardElement, CLoginCardEvents> = /*@__PURE__*/ createComponent<CLoginCardElement, CLoginCardEvents>({
    tagName: 'c-login-card',
    elementClass: CLoginCardElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CLoginCardEvents,
    defineCustomElement: defineCLoginCard
});

type CLoginCardActionsEvents = NonNullable<unknown>;

export const CLoginCardActions: StencilReactComponent<CLoginCardActionsElement, CLoginCardActionsEvents> = /*@__PURE__*/ createComponent<CLoginCardActionsElement, CLoginCardActionsEvents>({
    tagName: 'c-login-card-actions',
    elementClass: CLoginCardActionsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CLoginCardActionsEvents,
    defineCustomElement: defineCLoginCardActions
});

type CLoginCardContentEvents = NonNullable<unknown>;

export const CLoginCardContent: StencilReactComponent<CLoginCardContentElement, CLoginCardContentEvents> = /*@__PURE__*/ createComponent<CLoginCardContentElement, CLoginCardContentEvents>({
    tagName: 'c-login-card-content',
    elementClass: CLoginCardContentElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CLoginCardContentEvents,
    defineCustomElement: defineCLoginCardContent
});

type CLoginCardTitleEvents = NonNullable<unknown>;

export const CLoginCardTitle: StencilReactComponent<CLoginCardTitleElement, CLoginCardTitleEvents> = /*@__PURE__*/ createComponent<CLoginCardTitleElement, CLoginCardTitleEvents>({
    tagName: 'c-login-card-title',
    elementClass: CLoginCardTitleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CLoginCardTitleEvents,
    defineCustomElement: defineCLoginCardTitle
});

type CMainEvents = NonNullable<unknown>;

export const CMain: StencilReactComponent<CMainElement, CMainEvents> = /*@__PURE__*/ createComponent<CMainElement, CMainEvents>({
    tagName: 'c-main',
    elementClass: CMainElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CMainEvents,
    defineCustomElement: defineCMain
});

type CMenuEvents = NonNullable<unknown>;

export const CMenu: StencilReactComponent<CMenuElement, CMenuEvents> = /*@__PURE__*/ createComponent<CMenuElement, CMenuEvents>({
    tagName: 'c-menu',
    elementClass: CMenuElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CMenuEvents,
    defineCustomElement: defineCMenu
});

type CMenuItemsEvents = {
    onClose: EventName<CustomEvent<any>>,
    onOpen: EventName<CustomEvent<{
        height: number;
        width: number;
        isInView: {
            x: boolean;
            y: boolean;
        };
    }>>
};

export const CMenuItems: StencilReactComponent<CMenuItemsElement, CMenuItemsEvents> = /*@__PURE__*/ createComponent<CMenuItemsElement, CMenuItemsEvents>({
    tagName: 'c-menu-items',
    elementClass: CMenuItemsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onClose: 'close',
        onOpen: 'open'
    } as CMenuItemsEvents,
    defineCustomElement: defineCMenuItems
});

type CMessageEvents = NonNullable<unknown>;

export const CMessage: StencilReactComponent<CMessageElement, CMessageEvents> = /*@__PURE__*/ createComponent<CMessageElement, CMessageEvents>({
    tagName: 'c-message',
    elementClass: CMessageElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CMessageEvents,
    defineCustomElement: defineCMessage
});

type CModalEvents = { onChangeValue: EventName<CustomEvent<boolean>> };

export const CModal: StencilReactComponent<CModalElement, CModalEvents> = /*@__PURE__*/ createComponent<CModalElement, CModalEvents>({
    tagName: 'c-modal',
    elementClass: CModalElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onChangeValue: 'changeValue' } as CModalEvents,
    defineCustomElement: defineCModal
});

type CNavigationButtonEvents = NonNullable<unknown>;

export const CNavigationButton: StencilReactComponent<CNavigationButtonElement, CNavigationButtonEvents> = /*@__PURE__*/ createComponent<CNavigationButtonElement, CNavigationButtonEvents>({
    tagName: 'c-navigation-button',
    elementClass: CNavigationButtonElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CNavigationButtonEvents,
    defineCustomElement: defineCNavigationButton
});

type COptionEvents = NonNullable<unknown>;

export const COption: StencilReactComponent<COptionElement, COptionEvents> = /*@__PURE__*/ createComponent<COptionElement, COptionEvents>({
    tagName: 'c-option',
    elementClass: COptionElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as COptionEvents,
    defineCustomElement: defineCOption
});

type COptionValueEvents = NonNullable<unknown>;

export const COptionValue: StencilReactComponent<COptionValueElement, COptionValueEvents> = /*@__PURE__*/ createComponent<COptionValueElement, COptionValueEvents>({
    tagName: 'c-option-value',
    elementClass: COptionValueElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as COptionValueEvents,
    defineCustomElement: defineCOptionValue
});

type COtpInputEvents = {
    onChangeValue: EventName<CustomEvent<string>>,
    onCompletion: EventName<CustomEvent<string>>
};

export const COtpInput: StencilReactComponent<COtpInputElement, COtpInputEvents> = /*@__PURE__*/ createComponent<COtpInputElement, COtpInputEvents>({
    tagName: 'c-otp-input',
    elementClass: COtpInputElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onChangeValue: 'changeValue',
        onCompletion: 'completion'
    } as COtpInputEvents,
    defineCustomElement: defineCOtpInput
});

type CPageEvents = NonNullable<unknown>;

export const CPage: StencilReactComponent<CPageElement, CPageEvents> = /*@__PURE__*/ createComponent<CPageElement, CPageEvents>({
    tagName: 'c-page',
    elementClass: CPageElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CPageEvents,
    defineCustomElement: defineCPage
});

type CPaginationEvents = { onChangeValue: EventName<CPaginationCustomEvent<CPaginationOptions>> };

export const CPagination: StencilReactComponent<CPaginationElement, CPaginationEvents> = /*@__PURE__*/ createComponent<CPaginationElement, CPaginationEvents>({
    tagName: 'c-pagination',
    elementClass: CPaginationElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onChangeValue: 'changeValue' } as CPaginationEvents,
    defineCustomElement: defineCPagination
});

type CProgressBarEvents = NonNullable<unknown>;

export const CProgressBar: StencilReactComponent<CProgressBarElement, CProgressBarEvents> = /*@__PURE__*/ createComponent<CProgressBarElement, CProgressBarEvents>({
    tagName: 'c-progress-bar',
    elementClass: CProgressBarElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CProgressBarEvents,
    defineCustomElement: defineCProgressBar
});

type CRadioEvents = NonNullable<unknown>;

export const CRadio: StencilReactComponent<CRadioElement, CRadioEvents> = /*@__PURE__*/ createComponent<CRadioElement, CRadioEvents>({
    tagName: 'c-radio',
    elementClass: CRadioElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CRadioEvents,
    defineCustomElement: defineCRadio
});

type CRadioGroupEvents = { onChangeValue: EventName<CustomEvent<any>> };

export const CRadioGroup: StencilReactComponent<CRadioGroupElement, CRadioGroupEvents> = /*@__PURE__*/ createComponent<CRadioGroupElement, CRadioGroupEvents>({
    tagName: 'c-radio-group',
    elementClass: CRadioGroupElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onChangeValue: 'changeValue' } as CRadioGroupEvents,
    defineCustomElement: defineCRadioGroup
});

type CRippleEvents = NonNullable<unknown>;

export const CRipple: StencilReactComponent<CRippleElement, CRippleEvents> = /*@__PURE__*/ createComponent<CRippleElement, CRippleEvents>({
    tagName: 'c-ripple',
    elementClass: CRippleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CRippleEvents,
    defineCustomElement: defineCRipple
});

type CRowEvents = NonNullable<unknown>;

export const CRow: StencilReactComponent<CRowElement, CRowEvents> = /*@__PURE__*/ createComponent<CRowElement, CRowEvents>({
    tagName: 'c-row',
    elementClass: CRowElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CRowEvents,
    defineCustomElement: defineCRow
});

type CSelectEvents = { onChangeValue: EventName<CustomEvent<any>> };

export const CSelect: StencilReactComponent<CSelectElement, CSelectEvents> = /*@__PURE__*/ createComponent<CSelectElement, CSelectEvents>({
    tagName: 'c-select',
    elementClass: CSelectElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onChangeValue: 'changeValue' } as CSelectEvents,
    defineCustomElement: defineCSelect
});

type CSideNavigationEvents = NonNullable<unknown>;

export const CSideNavigation: StencilReactComponent<CSideNavigationElement, CSideNavigationEvents> = /*@__PURE__*/ createComponent<CSideNavigationElement, CSideNavigationEvents>({
    tagName: 'c-side-navigation',
    elementClass: CSideNavigationElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CSideNavigationEvents,
    defineCustomElement: defineCSideNavigation
});

type CSideNavigationItemEvents = { onItemChange: EventName<CustomEvent<any>> };

export const CSideNavigationItem: StencilReactComponent<CSideNavigationItemElement, CSideNavigationItemEvents> = /*@__PURE__*/ createComponent<CSideNavigationItemElement, CSideNavigationItemEvents>({
    tagName: 'c-side-navigation-item',
    elementClass: CSideNavigationItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onItemChange: 'itemChange' } as CSideNavigationItemEvents,
    defineCustomElement: defineCSideNavigationItem
});

type CSideNavigationTitleEvents = NonNullable<unknown>;

export const CSideNavigationTitle: StencilReactComponent<CSideNavigationTitleElement, CSideNavigationTitleEvents> = /*@__PURE__*/ createComponent<CSideNavigationTitleElement, CSideNavigationTitleEvents>({
    tagName: 'c-side-navigation-title',
    elementClass: CSideNavigationTitleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CSideNavigationTitleEvents,
    defineCustomElement: defineCSideNavigationTitle
});

type CSliderEvents = { onChangeValue: EventName<CustomEvent<any>> };

export const CSlider: StencilReactComponent<CSliderElement, CSliderEvents> = /*@__PURE__*/ createComponent<CSliderElement, CSliderEvents>({
    tagName: 'c-slider',
    elementClass: CSliderElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onChangeValue: 'changeValue' } as CSliderEvents,
    defineCustomElement: defineCSlider
});

type CSpacerEvents = NonNullable<unknown>;

export const CSpacer: StencilReactComponent<CSpacerElement, CSpacerEvents> = /*@__PURE__*/ createComponent<CSpacerElement, CSpacerEvents>({
    tagName: 'c-spacer',
    elementClass: CSpacerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CSpacerEvents,
    defineCustomElement: defineCSpacer
});

type CSpinnerEvents = NonNullable<unknown>;

export const CSpinner: StencilReactComponent<CSpinnerElement, CSpinnerEvents> = /*@__PURE__*/ createComponent<CSpinnerElement, CSpinnerEvents>({
    tagName: 'c-spinner',
    elementClass: CSpinnerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CSpinnerEvents,
    defineCustomElement: defineCSpinner
});

type CStatusEvents = NonNullable<unknown>;

export const CStatus: StencilReactComponent<CStatusElement, CStatusEvents> = /*@__PURE__*/ createComponent<CStatusElement, CStatusEvents>({
    tagName: 'c-status',
    elementClass: CStatusElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CStatusEvents,
    defineCustomElement: defineCStatus
});

type CStepEvents = NonNullable<unknown>;

export const CStep: StencilReactComponent<CStepElement, CStepEvents> = /*@__PURE__*/ createComponent<CStepElement, CStepEvents>({
    tagName: 'c-step',
    elementClass: CStepElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CStepEvents,
    defineCustomElement: defineCStep
});

type CStepsEvents = { onChangeValue: EventName<CustomEvent<number | string>> };

export const CSteps: StencilReactComponent<CStepsElement, CStepsEvents> = /*@__PURE__*/ createComponent<CStepsElement, CStepsEvents>({
    tagName: 'c-steps',
    elementClass: CStepsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onChangeValue: 'changeValue' } as CStepsEvents,
    defineCustomElement: defineCSteps
});

type CSubNavigationItemEvents = NonNullable<unknown>;

export const CSubNavigationItem: StencilReactComponent<CSubNavigationItemElement, CSubNavigationItemEvents> = /*@__PURE__*/ createComponent<CSubNavigationItemElement, CSubNavigationItemEvents>({
    tagName: 'c-sub-navigation-item',
    elementClass: CSubNavigationItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CSubNavigationItemEvents,
    defineCustomElement: defineCSubNavigationItem
});

type CSwiperEvents = { onChangeValue: EventName<CustomEvent<number | string>> };

export const CSwiper: StencilReactComponent<CSwiperElement, CSwiperEvents> = /*@__PURE__*/ createComponent<CSwiperElement, CSwiperEvents>({
    tagName: 'c-swiper',
    elementClass: CSwiperElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onChangeValue: 'changeValue' } as CSwiperEvents,
    defineCustomElement: defineCSwiper
});

type CSwiperTabEvents = { onChangeValue: EventName<CustomEvent<number | string>> };

export const CSwiperTab: StencilReactComponent<CSwiperTabElement, CSwiperTabEvents> = /*@__PURE__*/ createComponent<CSwiperTabElement, CSwiperTabEvents>({
    tagName: 'c-swiper-tab',
    elementClass: CSwiperTabElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onChangeValue: 'changeValue' } as CSwiperTabEvents,
    defineCustomElement: defineCSwiperTab
});

type CSwitchEvents = { onChangeValue: EventName<CustomEvent<any>> };

export const CSwitch: StencilReactComponent<CSwitchElement, CSwitchEvents> = /*@__PURE__*/ createComponent<CSwitchElement, CSwitchEvents>({
    tagName: 'c-switch',
    elementClass: CSwitchElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onChangeValue: 'changeValue' } as CSwitchEvents,
    defineCustomElement: defineCSwitch
});

type CTabEvents = {
    onTabChange: EventName<CTabCustomEvent<{
        value: number | string;
        element: HTMLCTabElement;
    }>>,
    onTabFocus: EventName<CustomEvent<number | string>>
};

export const CTab: StencilReactComponent<CTabElement, CTabEvents> = /*@__PURE__*/ createComponent<CTabElement, CTabEvents>({
    tagName: 'c-tab',
    elementClass: CTabElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onTabChange: 'tabChange',
        onTabFocus: 'tabFocus'
    } as CTabEvents,
    defineCustomElement: defineCTab
});

type CTabButtonsEvents = { onChangeValue: EventName<CustomEvent<number | string>> };

export const CTabButtons: StencilReactComponent<CTabButtonsElement, CTabButtonsEvents> = /*@__PURE__*/ createComponent<CTabButtonsElement, CTabButtonsEvents>({
    tagName: 'c-tab-buttons',
    elementClass: CTabButtonsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onChangeValue: 'changeValue' } as CTabButtonsEvents,
    defineCustomElement: defineCTabButtons
});

type CTabItemEvents = { onContentChange: EventName<CustomEvent<any>> };

export const CTabItem: StencilReactComponent<CTabItemElement, CTabItemEvents> = /*@__PURE__*/ createComponent<CTabItemElement, CTabItemEvents>({
    tagName: 'c-tab-item',
    elementClass: CTabItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onContentChange: 'contentChange' } as CTabItemEvents,
    defineCustomElement: defineCTabItem
});

type CTabItemsEvents = NonNullable<unknown>;

export const CTabItems: StencilReactComponent<CTabItemsElement, CTabItemsEvents> = /*@__PURE__*/ createComponent<CTabItemsElement, CTabItemsEvents>({
    tagName: 'c-tab-items',
    elementClass: CTabItemsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CTabItemsEvents,
    defineCustomElement: defineCTabItems
});

type CTableEvents = NonNullable<unknown>;

export const CTable: StencilReactComponent<CTableElement, CTableEvents> = /*@__PURE__*/ createComponent<CTableElement, CTableEvents>({
    tagName: 'c-table',
    elementClass: CTableElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CTableEvents,
    defineCustomElement: defineCTable
});

type CTabsEvents = { onChangeValue: EventName<CustomEvent<any>> };

export const CTabs: StencilReactComponent<CTabsElement, CTabsEvents> = /*@__PURE__*/ createComponent<CTabsElement, CTabsEvents>({
    tagName: 'c-tabs',
    elementClass: CTabsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onChangeValue: 'changeValue' } as CTabsEvents,
    defineCustomElement: defineCTabs
});

type CTagEvents = { onClose: EventName<CustomEvent<any>> };

export const CTag: StencilReactComponent<CTagElement, CTagEvents> = /*@__PURE__*/ createComponent<CTagElement, CTagEvents>({
    tagName: 'c-tag',
    elementClass: CTagElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onClose: 'close' } as CTagEvents,
    defineCustomElement: defineCTag
});

type CTagsEvents = NonNullable<unknown>;

export const CTags: StencilReactComponent<CTagsElement, CTagsEvents> = /*@__PURE__*/ createComponent<CTagsElement, CTagsEvents>({
    tagName: 'c-tags',
    elementClass: CTagsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CTagsEvents,
    defineCustomElement: defineCTags
});

type CTextFieldEvents = { onChangeValue: EventName<CustomEvent<any>> };

export const CTextField: StencilReactComponent<CTextFieldElement, CTextFieldEvents> = /*@__PURE__*/ createComponent<CTextFieldElement, CTextFieldEvents>({
    tagName: 'c-text-field',
    elementClass: CTextFieldElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onChangeValue: 'changeValue' } as CTextFieldEvents,
    defineCustomElement: defineCTextField
});

type CToastEvents = { onClose: EventName<CToastCustomEvent<CToastMessage>> };

export const CToast: StencilReactComponent<CToastElement, CToastEvents> = /*@__PURE__*/ createComponent<CToastElement, CToastEvents>({
    tagName: 'c-toast',
    elementClass: CToastElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onClose: 'close' } as CToastEvents,
    defineCustomElement: defineCToast
});

type CToastsEvents = NonNullable<unknown>;

export const CToasts: StencilReactComponent<CToastsElement, CToastsEvents> = /*@__PURE__*/ createComponent<CToastsElement, CToastsEvents>({
    tagName: 'c-toasts',
    elementClass: CToastsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CToastsEvents,
    defineCustomElement: defineCToasts
});

type CToolbarEvents = NonNullable<unknown>;

export const CToolbar: StencilReactComponent<CToolbarElement, CToolbarEvents> = /*@__PURE__*/ createComponent<CToolbarElement, CToolbarEvents>({
    tagName: 'c-toolbar',
    elementClass: CToolbarElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as CToolbarEvents,
    defineCustomElement: defineCToolbar
});
