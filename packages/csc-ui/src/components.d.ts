/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { CAutocompleteItem, CPaginationOptions, CRadioGroupItem, CSelectItem } from "./types";
import { CardBackground } from "./components/c-card/c-card";
export namespace Components {
    interface CAccordion {
        /**
          * Allow expanding multiple items
         */
        "multiple": boolean;
        /**
          * Show an outline around expanded items
         */
        "outlined": boolean;
        /**
          * Value of the accordion
         */
        "value": number | string | (number | string)[];
    }
    interface CAccordionItem {
        /**
          * Expansion status of the item
         */
        "expanded": boolean;
        /**
          * Heading of the accordion item
         */
        "heading": string;
        /**
          * Icon
          * @deprecated Please use the icon slot instead
         */
        "icon": 'enabled' | 'disabled' | 'bell' | 'pending';
        /**
          * Show an outline around the expanded item
          * @private
         */
        "outlined": boolean;
        /**
          * Value of the accordion item
         */
        "value": number | string;
    }
    interface CAutocomplete {
        /**
          * Auto focus the input
         */
        "autofocus": boolean;
        /**
          * Dense variant
         */
        "dense": boolean;
        /**
          * Disable the input
         */
        "disabled": boolean;
        /**
          * Hide the hint and error messages
         */
        "hideDetails": boolean;
        /**
          * Hint text for the input
         */
        "hint": string;
        /**
          * Id of the element
         */
        "hostId": string;
        /**
          * Items to be selected
         */
        "items": {
    name: string;
    value: string;
  }[];
        /**
          * Items per page before adding scroll
         */
        "itemsPerPage": number;
        /**
          * Element label
         */
        "label": string;
        /**
          * Input field name
         */
        "name": string;
        /**
          * Placeholder text
         */
        "placeholder": string;
        /**
          * Search string
         */
        "query": string;
        /**
          * Show required validation
         */
        "required": boolean;
        /**
          * Shadow variant
         */
        "shadow": boolean;
        /**
          * Set the validíty of the input
         */
        "valid": boolean;
        /**
          * Manual validation
         */
        "validate": boolean;
        /**
          * Validate the input on blur
         */
        "validateOnBlur": boolean;
        /**
          * Custom validation message
         */
        "validation": string;
        /**
          * Selected item
         */
        "value": CAutocompleteItem;
    }
    interface CButton {
        /**
          * Disable the button
         */
        "disabled": boolean;
        /**
          * Fit width to containing element
         */
        "fit": boolean;
        /**
          * Light button background
         */
        "ghost": boolean;
        /**
          * Id of the button
         */
        "hostId": string;
        /**
          * Name of the icon to be displayed in the button
          * @deprecated Please use the icon slot instead
         */
        "icon": 'plus' | 'minus' | 'account' | 'edit';
        /**
          * Display loader on the button
         */
        "loading": boolean;
        /**
          * Remove the default border radius
         */
        "noRadius": boolean;
        /**
          * Outlined button style
         */
        "outlined": boolean;
        /**
          * Size of the button
         */
        "size": 'default' | 'small' | 'large';
        /**
          * Transparent button background
         */
        "text": boolean;
        /**
          * Button type
         */
        "type": 'button' | 'submit';
        /**
          * Value for the button - for use in the c-content-switcher
         */
        "value"?: number | string;
    }
    interface CCard {
        /**
          * Card background image for login pages of specific services
         */
        "background": CardBackground;
        /**
          * Background color
         */
        "backgroundColor": string;
    }
    interface CCardActions {
        /**
          * Align the actions
         */
        "align": 'start' | 'center' | 'end';
        /**
          * Justify the actions
         */
        "justify": | 'start'
    | 'center'
    | 'end'
    | 'space-between'
    | 'stretch'
    | 'space-around';
    }
    interface CCardContent {
    }
    interface CCardTitle {
    }
    interface CCheckbox {
        /**
          * Disable the checkbox
         */
        "disabled": boolean;
        /**
          * Hide the hint and error messages
         */
        "hideDetails": boolean;
        /**
          * Hint text for the input
         */
        "hint": string;
        /**
          * Element label
         */
        "label": string;
        /**
          * Set the validíty of the input
         */
        "valid": boolean;
        /**
          * Custom validation message
         */
        "validation": string;
        /**
          * Is the element checked
         */
        "value": boolean;
    }
    interface CConsent {
    }
    interface CContainer {
        /**
          * Maximum width of container in pixels
         */
        "width": number;
    }
    interface CCscLogo {
        /**
          * Logo width in pixels
         */
        "width": number;
    }
    interface CFlex {
    }
    interface CIconButton {
        /**
          * Show a badge on top of the icon
         */
        "badge": string;
        /**
          * Disable the button
         */
        "disabled": boolean;
        /**
          * Ghost variant of the button
         */
        "ghost": boolean;
        /**
          * Outlined variant of the button
         */
        "outlined": boolean;
        /**
          * Size of the button
         */
        "size": 'default' | 'x-small' | 'small';
        /**
          * Text variant of the button
         */
        "text": boolean;
    }
    interface CInput {
        /**
          * Auto focus the input
         */
        "autofocus": boolean;
        /**
          * Disable the input
         */
        "disabled": boolean;
        /**
          * Render a hidden input outside the shadow dom
         */
        "form": boolean;
        /**
          * Hide the hint and error messages
         */
        "hideDetails": boolean;
        /**
          * Hint text for the input
         */
        "hint": string;
        /**
          * Id of the input
         */
        "hostId": string;
        /**
          * Label of the input
         */
        "label": string;
        /**
          * Maximum value on a numeric input
         */
        "max": number;
        /**
          * Minimum value on a numeric input
         */
        "min": number;
        /**
          * Name of the input
         */
        "name": string;
        /**
          * Numeric input
          * @deprecated Use type="number" instead
         */
        "number": boolean;
        /**
          * Placeholder of the input
         */
        "placeholder": string;
        /**
          * Mark as readonly
         */
        "readonly": boolean;
        /**
          * Set the input as required
         */
        "required": boolean;
        /**
          * Rows on the input
         */
        "rows": number;
        /**
          * Shadow variant of the input
         */
        "shadow": boolean;
        /**
          * Step size on a numeric input
         */
        "step": number;
        /**
          * Type of the input
         */
        "type": string;
        /**
          * Set the validíty of the input
         */
        "valid": boolean;
        /**
          * Manual validation
         */
        "validate": boolean;
        /**
          * Validate the input on blur
         */
        "validateOnBlur": boolean;
        /**
          * Custom validation message
         */
        "validation": string;
        /**
          * Value of the input
         */
        "value": string | number | CSelectItem | CAutocompleteItem;
        /**
          * Variant
         */
        "variant": 'text' | 'select';
    }
    interface CLink {
        /**
          * Url of link
         */
        "href": string;
        /**
          * regular target attribute of a hyperlink
         */
        "target": string;
        /**
          * Display line under the link
         */
        "underline": boolean;
    }
    interface CLoader {
        /**
          * Delay in seconds of showing the contents in the slot of the loader
         */
        "contentdelay": number;
    }
    interface CMain {
    }
    interface CMenu {
        /**
          * Menu items
         */
        "items": { name: string; action: Function }[];
        /**
          * No hover background
         */
        "nohover": boolean;
        /**
          * Simple variant without chevron and background, E.g. when a button is the activator
         */
        "simple": boolean;
        /**
          * Small variant
         */
        "small": boolean;
    }
    interface CMenuItem {
        /**
          * Is the item the active selection
         */
        "active": boolean;
        /**
          * Small variant
         */
        "small": boolean;
    }
    interface CModal {
        /**
          * Not dismissed when touching/clicking outside the content
         */
        "persistent": boolean;
        /**
          * Is the modal visible
         */
        "value": boolean;
    }
    interface CNavigationbutton {
    }
    interface CNotification {
        /**
          * notification contents
         */
        "notification": {
    name: string;
    type: 'warning' | 'error' | 'success' | 'info';
    delay?: number;
    requiresClosing?: boolean;
  };
        /**
          * Position of the notifications
         */
        "position": 'fixed' | 'absolute';
    }
    interface CPagination {
        /**
          * Hide details (per page dropdown and the 'x - y of n pages' text)
         */
        "hideDetails": boolean;
        /**
          * Hide range indicator
         */
        "hideRange": boolean;
        /**
          * Items per page options
         */
        "itemsPerPageOptions": number[];
        /**
          * Hide page number buttons
         */
        "simple": boolean;
        /**
          * Hide details (per page dropdown and the 'x - y of n pages' text)
         */
        "size": 'default' | 'small';
        /**
          * Object containing values that are needed for pagination.  Note! startFrom and endTo are assigned automatically to the object based on other values
         */
        "value": CPaginationOptions;
    }
    interface CProgressBar {
        /**
          * Color of the bar (valid css color)
          * @default var(--csc-primary)
         */
        "color": string;
        /**
          * Indeterminate state of the progress bar
         */
        "indeterminate": boolean;
        /**
          * Progress bar value in percentage (0 to 100)
         */
        "value": number;
    }
    interface CRadioGroup {
        /**
          * Color of the radio group
         */
        "color": string;
        /**
          * Disable the radio group
         */
        "disabled": boolean;
        /**
          * Radio group items
         */
        "items": CRadioGroupItem[];
        /**
          * Label of the radio group
         */
        "label": string;
        /**
          * Value of the radio group
         */
        "value": CRadioGroupItem;
    }
    interface CRow {
        /**
          * Align items vertically
         */
        "align": 'start' | 'center' | 'end';
        /**
          * Gap between items in px
         */
        "gap": number;
        /**
          * Justify content horizontally
         */
        "justify": 'start' | 'center' | 'end' | 'space-between';
        /**
          * Disable flex wrap
         */
        "nowrap": boolean;
    }
    interface CSelect {
        /**
          * Auto focus the input
         */
        "autofocus": boolean;
        /**
          * Disable the input
         */
        "disabled": boolean;
        /**
          * Hide the hint and error messages
         */
        "hideDetails": boolean;
        /**
          * Hint text for the input
         */
        "hint": string;
        /**
          * Id of the element
         */
        "hostId": string;
        /**
          * selectable items
         */
        "items": CSelectItem[];
        /**
          * Items per page before adding scroll
         */
        "itemsPerPage": number;
        /**
          * Element label
         */
        "label": string;
        /**
          * Input field name
         */
        "name": string;
        /**
          * Placeholder text
         */
        "placeholder": string;
        /**
          * Show required validation
         */
        "required": boolean;
        /**
          * Return only the item value rather than the whole item object
         */
        "returnValue": false;
        /**
          * Shadow variant
         */
        "shadow": boolean;
        /**
          * Set the validíty of the input
         */
        "valid": boolean;
        /**
          * Manual validation
         */
        "validate": boolean;
        /**
          * Validate the input on blur
         */
        "validateOnBlur": boolean;
        /**
          * Custom validation message
         */
        "validation": string;
        /**
          * Selected item
         */
        "value": string | number | CSelectItem;
    }
    interface CSidenavigation {
        /**
          * Mobile version menu visibility
         */
        "menuVisible": boolean;
        /**
          * Mobile version
         */
        "mobile": boolean;
    }
    interface CSidenavigationitem {
        /**
          * Indicate active state
         */
        "active": boolean;
        /**
          * Hyperlink url
         */
        "href": string;
    }
    interface CSpacer {
    }
    interface CSubnavigationitem {
        /**
          * Active state
         */
        "active": boolean;
        /**
          * Link url
         */
        "href": string;
    }
    interface CSwiper {
        /**
          * Value of the swiper
         */
        "value": number | string;
    }
    interface CSwiperTab {
        /**
          * Mark as active
         */
        "active": boolean;
        /**
          * Disable button
         */
        "disabled": boolean;
        /**
          * Id of the button
         */
        "hostId": string;
        /**
          * Label of the button
         */
        "label": string;
        /**
          * Value of the button
         */
        "value": number | string;
    }
    interface CSwitch {
        /**
          * Disable the switch
         */
        "hostDisabled": boolean;
        /**
          * Id for the element
         */
        "hostId": string;
        /**
          * Value of the element
         */
        "value": boolean;
    }
    interface CTab {
        /**
          * Mark tab as active
         */
        "active": boolean;
        /**
          * Mark tab as disabled
         */
        "disabled": boolean;
        /**
          * Id of the tab
         */
        "hostId": string;
        /**
          * Value for the tab - for use in c-tabs
         */
        "value"?: number | string;
    }
    interface CTabButtons {
        /**
          * Disable tab buttons
         */
        "hostDisabled": boolean;
        /**
          * Always require a selection
         */
        "mandatory": boolean;
        /**
          * Size of the buttons
         */
        "size": 'default' | 'small';
        /**
          * Value of tab buttons
         */
        "value": number | string;
    }
    interface CTabs {
        /**
          * Disable the bottom border
         */
        "borderless": boolean;
        /**
          * Currently active tab
         */
        "value": number | string;
    }
    interface CTag {
        /**
          * Mark tag as active
         */
        "active": boolean;
        /**
          * Mark tag as closeable
         */
        "closeable": boolean;
        /**
          * Stretch to fill the container
         */
        "fit": boolean;
    }
    interface CTextField {
        /**
          * Auto focus the input
         */
        "autofocus": boolean;
        /**
          * Disable the input
         */
        "disabled": boolean;
        /**
          * Render a hidden input outside the shadow dom
         */
        "form": boolean;
        /**
          * Hide the hint and error messages
         */
        "hideDetails": boolean;
        /**
          * Hint text for the input
         */
        "hint": string;
        /**
          * Id of the input
         */
        "hostId": string;
        /**
          * Label of the input
         */
        "label": string;
        /**
          * Maximum value on a numeric input
         */
        "max": number;
        /**
          * Minimum value on a numeric input
         */
        "min": number;
        /**
          * Name of the input
         */
        "name": string;
        /**
          * Numeric input
          * @deprecated Use type="number" instead
         */
        "number": boolean;
        /**
          * Placeholder of the input
         */
        "placeholder": string;
        /**
          * Mark as readonly
         */
        "readonly": boolean;
        /**
          * Set the input as required
         */
        "required": boolean;
        /**
          * Rows on the input
         */
        "rows": number;
        /**
          * Shadow variant of the input
         */
        "shadow": boolean;
        /**
          * Step size on a numeric input
         */
        "step": number;
        /**
          * Type of the input
         */
        "type": string;
        /**
          * Set the validíty of the input
         */
        "valid": boolean;
        /**
          * Manual validation
         */
        "validate": boolean;
        /**
          * Validate the input on blur
         */
        "validateOnBlur": boolean;
        /**
          * Custom validation message
         */
        "validation": string;
        /**
          * Value of the input
         */
        "value": string;
    }
    interface CTitle {
    }
    interface CToolbar {
    }
}
declare global {
    interface HTMLCAccordionElement extends Components.CAccordion, HTMLStencilElement {
    }
    var HTMLCAccordionElement: {
        prototype: HTMLCAccordionElement;
        new (): HTMLCAccordionElement;
    };
    interface HTMLCAccordionItemElement extends Components.CAccordionItem, HTMLStencilElement {
    }
    var HTMLCAccordionItemElement: {
        prototype: HTMLCAccordionItemElement;
        new (): HTMLCAccordionItemElement;
    };
    interface HTMLCAutocompleteElement extends Components.CAutocomplete, HTMLStencilElement {
    }
    var HTMLCAutocompleteElement: {
        prototype: HTMLCAutocompleteElement;
        new (): HTMLCAutocompleteElement;
    };
    interface HTMLCButtonElement extends Components.CButton, HTMLStencilElement {
    }
    var HTMLCButtonElement: {
        prototype: HTMLCButtonElement;
        new (): HTMLCButtonElement;
    };
    interface HTMLCCardElement extends Components.CCard, HTMLStencilElement {
    }
    var HTMLCCardElement: {
        prototype: HTMLCCardElement;
        new (): HTMLCCardElement;
    };
    interface HTMLCCardActionsElement extends Components.CCardActions, HTMLStencilElement {
    }
    var HTMLCCardActionsElement: {
        prototype: HTMLCCardActionsElement;
        new (): HTMLCCardActionsElement;
    };
    interface HTMLCCardContentElement extends Components.CCardContent, HTMLStencilElement {
    }
    var HTMLCCardContentElement: {
        prototype: HTMLCCardContentElement;
        new (): HTMLCCardContentElement;
    };
    interface HTMLCCardTitleElement extends Components.CCardTitle, HTMLStencilElement {
    }
    var HTMLCCardTitleElement: {
        prototype: HTMLCCardTitleElement;
        new (): HTMLCCardTitleElement;
    };
    interface HTMLCCheckboxElement extends Components.CCheckbox, HTMLStencilElement {
    }
    var HTMLCCheckboxElement: {
        prototype: HTMLCCheckboxElement;
        new (): HTMLCCheckboxElement;
    };
    interface HTMLCConsentElement extends Components.CConsent, HTMLStencilElement {
    }
    var HTMLCConsentElement: {
        prototype: HTMLCConsentElement;
        new (): HTMLCConsentElement;
    };
    interface HTMLCContainerElement extends Components.CContainer, HTMLStencilElement {
    }
    var HTMLCContainerElement: {
        prototype: HTMLCContainerElement;
        new (): HTMLCContainerElement;
    };
    interface HTMLCCscLogoElement extends Components.CCscLogo, HTMLStencilElement {
    }
    var HTMLCCscLogoElement: {
        prototype: HTMLCCscLogoElement;
        new (): HTMLCCscLogoElement;
    };
    interface HTMLCFlexElement extends Components.CFlex, HTMLStencilElement {
    }
    var HTMLCFlexElement: {
        prototype: HTMLCFlexElement;
        new (): HTMLCFlexElement;
    };
    interface HTMLCIconButtonElement extends Components.CIconButton, HTMLStencilElement {
    }
    var HTMLCIconButtonElement: {
        prototype: HTMLCIconButtonElement;
        new (): HTMLCIconButtonElement;
    };
    interface HTMLCInputElement extends Components.CInput, HTMLStencilElement {
    }
    var HTMLCInputElement: {
        prototype: HTMLCInputElement;
        new (): HTMLCInputElement;
    };
    interface HTMLCLinkElement extends Components.CLink, HTMLStencilElement {
    }
    var HTMLCLinkElement: {
        prototype: HTMLCLinkElement;
        new (): HTMLCLinkElement;
    };
    interface HTMLCLoaderElement extends Components.CLoader, HTMLStencilElement {
    }
    var HTMLCLoaderElement: {
        prototype: HTMLCLoaderElement;
        new (): HTMLCLoaderElement;
    };
    interface HTMLCMainElement extends Components.CMain, HTMLStencilElement {
    }
    var HTMLCMainElement: {
        prototype: HTMLCMainElement;
        new (): HTMLCMainElement;
    };
    interface HTMLCMenuElement extends Components.CMenu, HTMLStencilElement {
    }
    var HTMLCMenuElement: {
        prototype: HTMLCMenuElement;
        new (): HTMLCMenuElement;
    };
    interface HTMLCMenuItemElement extends Components.CMenuItem, HTMLStencilElement {
    }
    var HTMLCMenuItemElement: {
        prototype: HTMLCMenuItemElement;
        new (): HTMLCMenuItemElement;
    };
    interface HTMLCModalElement extends Components.CModal, HTMLStencilElement {
    }
    var HTMLCModalElement: {
        prototype: HTMLCModalElement;
        new (): HTMLCModalElement;
    };
    interface HTMLCNavigationbuttonElement extends Components.CNavigationbutton, HTMLStencilElement {
    }
    var HTMLCNavigationbuttonElement: {
        prototype: HTMLCNavigationbuttonElement;
        new (): HTMLCNavigationbuttonElement;
    };
    interface HTMLCNotificationElement extends Components.CNotification, HTMLStencilElement {
    }
    var HTMLCNotificationElement: {
        prototype: HTMLCNotificationElement;
        new (): HTMLCNotificationElement;
    };
    interface HTMLCPaginationElement extends Components.CPagination, HTMLStencilElement {
    }
    var HTMLCPaginationElement: {
        prototype: HTMLCPaginationElement;
        new (): HTMLCPaginationElement;
    };
    interface HTMLCProgressBarElement extends Components.CProgressBar, HTMLStencilElement {
    }
    var HTMLCProgressBarElement: {
        prototype: HTMLCProgressBarElement;
        new (): HTMLCProgressBarElement;
    };
    interface HTMLCRadioGroupElement extends Components.CRadioGroup, HTMLStencilElement {
    }
    var HTMLCRadioGroupElement: {
        prototype: HTMLCRadioGroupElement;
        new (): HTMLCRadioGroupElement;
    };
    interface HTMLCRowElement extends Components.CRow, HTMLStencilElement {
    }
    var HTMLCRowElement: {
        prototype: HTMLCRowElement;
        new (): HTMLCRowElement;
    };
    interface HTMLCSelectElement extends Components.CSelect, HTMLStencilElement {
    }
    var HTMLCSelectElement: {
        prototype: HTMLCSelectElement;
        new (): HTMLCSelectElement;
    };
    interface HTMLCSidenavigationElement extends Components.CSidenavigation, HTMLStencilElement {
    }
    var HTMLCSidenavigationElement: {
        prototype: HTMLCSidenavigationElement;
        new (): HTMLCSidenavigationElement;
    };
    interface HTMLCSidenavigationitemElement extends Components.CSidenavigationitem, HTMLStencilElement {
    }
    var HTMLCSidenavigationitemElement: {
        prototype: HTMLCSidenavigationitemElement;
        new (): HTMLCSidenavigationitemElement;
    };
    interface HTMLCSpacerElement extends Components.CSpacer, HTMLStencilElement {
    }
    var HTMLCSpacerElement: {
        prototype: HTMLCSpacerElement;
        new (): HTMLCSpacerElement;
    };
    interface HTMLCSubnavigationitemElement extends Components.CSubnavigationitem, HTMLStencilElement {
    }
    var HTMLCSubnavigationitemElement: {
        prototype: HTMLCSubnavigationitemElement;
        new (): HTMLCSubnavigationitemElement;
    };
    interface HTMLCSwiperElement extends Components.CSwiper, HTMLStencilElement {
    }
    var HTMLCSwiperElement: {
        prototype: HTMLCSwiperElement;
        new (): HTMLCSwiperElement;
    };
    interface HTMLCSwiperTabElement extends Components.CSwiperTab, HTMLStencilElement {
    }
    var HTMLCSwiperTabElement: {
        prototype: HTMLCSwiperTabElement;
        new (): HTMLCSwiperTabElement;
    };
    interface HTMLCSwitchElement extends Components.CSwitch, HTMLStencilElement {
    }
    var HTMLCSwitchElement: {
        prototype: HTMLCSwitchElement;
        new (): HTMLCSwitchElement;
    };
    interface HTMLCTabElement extends Components.CTab, HTMLStencilElement {
    }
    var HTMLCTabElement: {
        prototype: HTMLCTabElement;
        new (): HTMLCTabElement;
    };
    interface HTMLCTabButtonsElement extends Components.CTabButtons, HTMLStencilElement {
    }
    var HTMLCTabButtonsElement: {
        prototype: HTMLCTabButtonsElement;
        new (): HTMLCTabButtonsElement;
    };
    interface HTMLCTabsElement extends Components.CTabs, HTMLStencilElement {
    }
    var HTMLCTabsElement: {
        prototype: HTMLCTabsElement;
        new (): HTMLCTabsElement;
    };
    interface HTMLCTagElement extends Components.CTag, HTMLStencilElement {
    }
    var HTMLCTagElement: {
        prototype: HTMLCTagElement;
        new (): HTMLCTagElement;
    };
    interface HTMLCTextFieldElement extends Components.CTextField, HTMLStencilElement {
    }
    var HTMLCTextFieldElement: {
        prototype: HTMLCTextFieldElement;
        new (): HTMLCTextFieldElement;
    };
    interface HTMLCTitleElement extends Components.CTitle, HTMLStencilElement {
    }
    var HTMLCTitleElement: {
        prototype: HTMLCTitleElement;
        new (): HTMLCTitleElement;
    };
    interface HTMLCToolbarElement extends Components.CToolbar, HTMLStencilElement {
    }
    var HTMLCToolbarElement: {
        prototype: HTMLCToolbarElement;
        new (): HTMLCToolbarElement;
    };
    interface HTMLElementTagNameMap {
        "c-accordion": HTMLCAccordionElement;
        "c-accordion-item": HTMLCAccordionItemElement;
        "c-autocomplete": HTMLCAutocompleteElement;
        "c-button": HTMLCButtonElement;
        "c-card": HTMLCCardElement;
        "c-card-actions": HTMLCCardActionsElement;
        "c-card-content": HTMLCCardContentElement;
        "c-card-title": HTMLCCardTitleElement;
        "c-checkbox": HTMLCCheckboxElement;
        "c-consent": HTMLCConsentElement;
        "c-container": HTMLCContainerElement;
        "c-csc-logo": HTMLCCscLogoElement;
        "c-flex": HTMLCFlexElement;
        "c-icon-button": HTMLCIconButtonElement;
        "c-input": HTMLCInputElement;
        "c-link": HTMLCLinkElement;
        "c-loader": HTMLCLoaderElement;
        "c-main": HTMLCMainElement;
        "c-menu": HTMLCMenuElement;
        "c-menu-item": HTMLCMenuItemElement;
        "c-modal": HTMLCModalElement;
        "c-navigationbutton": HTMLCNavigationbuttonElement;
        "c-notification": HTMLCNotificationElement;
        "c-pagination": HTMLCPaginationElement;
        "c-progress-bar": HTMLCProgressBarElement;
        "c-radio-group": HTMLCRadioGroupElement;
        "c-row": HTMLCRowElement;
        "c-select": HTMLCSelectElement;
        "c-sidenavigation": HTMLCSidenavigationElement;
        "c-sidenavigationitem": HTMLCSidenavigationitemElement;
        "c-spacer": HTMLCSpacerElement;
        "c-subnavigationitem": HTMLCSubnavigationitemElement;
        "c-swiper": HTMLCSwiperElement;
        "c-swiper-tab": HTMLCSwiperTabElement;
        "c-switch": HTMLCSwitchElement;
        "c-tab": HTMLCTabElement;
        "c-tab-buttons": HTMLCTabButtonsElement;
        "c-tabs": HTMLCTabsElement;
        "c-tag": HTMLCTagElement;
        "c-text-field": HTMLCTextFieldElement;
        "c-title": HTMLCTitleElement;
        "c-toolbar": HTMLCToolbarElement;
    }
}
declare namespace LocalJSX {
    interface CAccordion {
        /**
          * Allow expanding multiple items
         */
        "multiple"?: boolean;
        /**
          * Emit changes to the parent
         */
        "onChangeValue"?: (event: CustomEvent<number | string>) => void;
        /**
          * Show an outline around expanded items
         */
        "outlined"?: boolean;
        /**
          * Value of the accordion
         */
        "value": number | string | (number | string)[];
    }
    interface CAccordionItem {
        /**
          * Expansion status of the item
         */
        "expanded"?: boolean;
        /**
          * Heading of the accordion item
         */
        "heading"?: string;
        /**
          * Icon
          * @deprecated Please use the icon slot instead
         */
        "icon"?: 'enabled' | 'disabled' | 'bell' | 'pending';
        /**
          * Emit changes to the c-accordion
          * @private
         */
        "onItemChange"?: (event: CustomEvent<any>) => void;
        /**
          * Show an outline around the expanded item
          * @private
         */
        "outlined"?: boolean;
        /**
          * Value of the accordion item
         */
        "value"?: number | string;
    }
    interface CAutocomplete {
        /**
          * Auto focus the input
         */
        "autofocus"?: boolean;
        /**
          * Dense variant
         */
        "dense"?: boolean;
        /**
          * Disable the input
         */
        "disabled"?: boolean;
        /**
          * Hide the hint and error messages
         */
        "hideDetails"?: boolean;
        /**
          * Hint text for the input
         */
        "hint"?: string;
        /**
          * Id of the element
         */
        "hostId"?: string;
        /**
          * Items to be selected
         */
        "items"?: {
    name: string;
    value: string;
  }[];
        /**
          * Items per page before adding scroll
         */
        "itemsPerPage"?: number;
        /**
          * Element label
         */
        "label"?: string;
        /**
          * Input field name
         */
        "name"?: string;
        /**
          * Triggered when text is typed
         */
        "onChangeQuery"?: (event: CustomEvent<any>) => void;
        /**
          * Triggered when an item is selected
         */
        "onChangeValue"?: (event: CustomEvent<any>) => void;
        /**
          * Placeholder text
         */
        "placeholder"?: string;
        /**
          * Search string
         */
        "query"?: string;
        /**
          * Show required validation
         */
        "required"?: boolean;
        /**
          * Shadow variant
         */
        "shadow"?: boolean;
        /**
          * Set the validíty of the input
         */
        "valid"?: boolean;
        /**
          * Manual validation
         */
        "validate"?: boolean;
        /**
          * Validate the input on blur
         */
        "validateOnBlur"?: boolean;
        /**
          * Custom validation message
         */
        "validation"?: string;
        /**
          * Selected item
         */
        "value"?: CAutocompleteItem;
    }
    interface CButton {
        /**
          * Disable the button
         */
        "disabled"?: boolean;
        /**
          * Fit width to containing element
         */
        "fit"?: boolean;
        /**
          * Light button background
         */
        "ghost"?: boolean;
        /**
          * Id of the button
         */
        "hostId"?: string;
        /**
          * Name of the icon to be displayed in the button
          * @deprecated Please use the icon slot instead
         */
        "icon"?: 'plus' | 'minus' | 'account' | 'edit';
        /**
          * Display loader on the button
         */
        "loading"?: boolean;
        /**
          * Remove the default border radius
         */
        "noRadius"?: boolean;
        /**
          * Outlined button style
         */
        "outlined"?: boolean;
        /**
          * Size of the button
         */
        "size"?: 'default' | 'small' | 'large';
        /**
          * Transparent button background
         */
        "text"?: boolean;
        /**
          * Button type
         */
        "type"?: 'button' | 'submit';
        /**
          * Value for the button - for use in the c-content-switcher
         */
        "value"?: number | string;
    }
    interface CCard {
        /**
          * Card background image for login pages of specific services
         */
        "background"?: CardBackground;
        /**
          * Background color
         */
        "backgroundColor"?: string;
    }
    interface CCardActions {
        /**
          * Align the actions
         */
        "align"?: 'start' | 'center' | 'end';
        /**
          * Justify the actions
         */
        "justify"?: | 'start'
    | 'center'
    | 'end'
    | 'space-between'
    | 'stretch'
    | 'space-around';
    }
    interface CCardContent {
    }
    interface CCardTitle {
    }
    interface CCheckbox {
        /**
          * Disable the checkbox
         */
        "disabled"?: boolean;
        /**
          * Hide the hint and error messages
         */
        "hideDetails"?: boolean;
        /**
          * Hint text for the input
         */
        "hint"?: string;
        /**
          * Element label
         */
        "label"?: string;
        /**
          * Triggered when element is checked or unchecked
         */
        "onChangeValue"?: (event: CustomEvent<any>) => void;
        /**
          * Set the validíty of the input
         */
        "valid"?: boolean;
        /**
          * Custom validation message
         */
        "validation"?: string;
        /**
          * Is the element checked
         */
        "value"?: boolean;
    }
    interface CConsent {
    }
    interface CContainer {
        /**
          * Maximum width of container in pixels
         */
        "width"?: number;
    }
    interface CCscLogo {
        /**
          * Logo width in pixels
         */
        "width"?: number;
    }
    interface CFlex {
    }
    interface CIconButton {
        /**
          * Show a badge on top of the icon
         */
        "badge"?: string;
        /**
          * Disable the button
         */
        "disabled"?: boolean;
        /**
          * Ghost variant of the button
         */
        "ghost"?: boolean;
        /**
          * Outlined variant of the button
         */
        "outlined"?: boolean;
        /**
          * Size of the button
         */
        "size"?: 'default' | 'x-small' | 'small';
        /**
          * Text variant of the button
         */
        "text"?: boolean;
    }
    interface CInput {
        /**
          * Auto focus the input
         */
        "autofocus"?: boolean;
        /**
          * Disable the input
         */
        "disabled"?: boolean;
        /**
          * Render a hidden input outside the shadow dom
         */
        "form"?: boolean;
        /**
          * Hide the hint and error messages
         */
        "hideDetails"?: boolean;
        /**
          * Hint text for the input
         */
        "hint"?: string;
        /**
          * Id of the input
         */
        "hostId"?: string;
        /**
          * Label of the input
         */
        "label"?: string;
        /**
          * Maximum value on a numeric input
         */
        "max"?: number;
        /**
          * Minimum value on a numeric input
         */
        "min"?: number;
        /**
          * Name of the input
         */
        "name"?: string;
        /**
          * Numeric input
          * @deprecated Use type="number" instead
         */
        "number"?: boolean;
        /**
          * Emit changes to the parent
         */
        "onChangeValue"?: (event: CustomEvent<any>) => void;
        /**
          * Placeholder of the input
         */
        "placeholder"?: string;
        /**
          * Mark as readonly
         */
        "readonly"?: boolean;
        /**
          * Set the input as required
         */
        "required"?: boolean;
        /**
          * Rows on the input
         */
        "rows"?: number;
        /**
          * Shadow variant of the input
         */
        "shadow"?: boolean;
        /**
          * Step size on a numeric input
         */
        "step"?: number;
        /**
          * Type of the input
         */
        "type"?: string;
        /**
          * Set the validíty of the input
         */
        "valid"?: boolean;
        /**
          * Manual validation
         */
        "validate"?: boolean;
        /**
          * Validate the input on blur
         */
        "validateOnBlur"?: boolean;
        /**
          * Custom validation message
         */
        "validation"?: string;
        /**
          * Value of the input
         */
        "value"?: string | number | CSelectItem | CAutocompleteItem;
        /**
          * Variant
         */
        "variant"?: 'text' | 'select';
    }
    interface CLink {
        /**
          * Url of link
         */
        "href"?: string;
        /**
          * regular target attribute of a hyperlink
         */
        "target"?: string;
        /**
          * Display line under the link
         */
        "underline"?: boolean;
    }
    interface CLoader {
        /**
          * Delay in seconds of showing the contents in the slot of the loader
         */
        "contentdelay"?: number;
    }
    interface CMain {
    }
    interface CMenu {
        /**
          * Menu items
         */
        "items"?: { name: string; action: Function }[];
        /**
          * No hover background
         */
        "nohover"?: boolean;
        /**
          * Simple variant without chevron and background, E.g. when a button is the activator
         */
        "simple"?: boolean;
        /**
          * Small variant
         */
        "small"?: boolean;
    }
    interface CMenuItem {
        /**
          * Is the item the active selection
         */
        "active"?: boolean;
        /**
          * Small variant
         */
        "small"?: boolean;
    }
    interface CModal {
        /**
          * Triggered when value is changed
         */
        "onChangeValue"?: (event: CustomEvent<boolean>) => void;
        /**
          * Not dismissed when touching/clicking outside the content
         */
        "persistent"?: boolean;
        /**
          * Is the modal visible
         */
        "value"?: boolean;
    }
    interface CNavigationbutton {
    }
    interface CNotification {
        /**
          * notification contents
         */
        "notification"?: {
    name: string;
    type: 'warning' | 'error' | 'success' | 'info';
    delay?: number;
    requiresClosing?: boolean;
  };
        /**
          * Position of the notifications
         */
        "position"?: 'fixed' | 'absolute';
    }
    interface CPagination {
        /**
          * Hide details (per page dropdown and the 'x - y of n pages' text)
         */
        "hideDetails"?: boolean;
        /**
          * Hide range indicator
         */
        "hideRange"?: boolean;
        /**
          * Items per page options
         */
        "itemsPerPageOptions"?: number[];
        /**
          * Triggered when values are changed
         */
        "onChangeValue"?: (event: CustomEvent<CPaginationOptions>) => void;
        /**
          * Hide page number buttons
         */
        "simple"?: boolean;
        /**
          * Hide details (per page dropdown and the 'x - y of n pages' text)
         */
        "size"?: 'default' | 'small';
        /**
          * Object containing values that are needed for pagination.  Note! startFrom and endTo are assigned automatically to the object based on other values
         */
        "value"?: CPaginationOptions;
    }
    interface CProgressBar {
        /**
          * Color of the bar (valid css color)
          * @default var(--csc-primary)
         */
        "color"?: string;
        /**
          * Indeterminate state of the progress bar
         */
        "indeterminate"?: boolean;
        /**
          * Progress bar value in percentage (0 to 100)
         */
        "value"?: number;
    }
    interface CRadioGroup {
        /**
          * Color of the radio group
         */
        "color"?: string;
        /**
          * Disable the radio group
         */
        "disabled"?: boolean;
        /**
          * Radio group items
         */
        "items"?: CRadioGroupItem[];
        /**
          * Label of the radio group
         */
        "label"?: string;
        /**
          * Emit value change to the parent
         */
        "onChangeValue"?: (event: CustomEvent<any>) => void;
        /**
          * Value of the radio group
         */
        "value"?: CRadioGroupItem;
    }
    interface CRow {
        /**
          * Align items vertically
         */
        "align"?: 'start' | 'center' | 'end';
        /**
          * Gap between items in px
         */
        "gap"?: number;
        /**
          * Justify content horizontally
         */
        "justify"?: 'start' | 'center' | 'end' | 'space-between';
        /**
          * Disable flex wrap
         */
        "nowrap"?: boolean;
    }
    interface CSelect {
        /**
          * Auto focus the input
         */
        "autofocus"?: boolean;
        /**
          * Disable the input
         */
        "disabled"?: boolean;
        /**
          * Hide the hint and error messages
         */
        "hideDetails"?: boolean;
        /**
          * Hint text for the input
         */
        "hint"?: string;
        /**
          * Id of the element
         */
        "hostId"?: string;
        /**
          * selectable items
         */
        "items"?: CSelectItem[];
        /**
          * Items per page before adding scroll
         */
        "itemsPerPage"?: number;
        /**
          * Element label
         */
        "label"?: string;
        /**
          * Input field name
         */
        "name"?: string;
        /**
          * Triggered when an item is selected
         */
        "onChangeValue"?: (event: CustomEvent<any>) => void;
        /**
          * Placeholder text
         */
        "placeholder"?: string;
        /**
          * Show required validation
         */
        "required"?: boolean;
        /**
          * Return only the item value rather than the whole item object
         */
        "returnValue"?: false;
        /**
          * Shadow variant
         */
        "shadow"?: boolean;
        /**
          * Set the validíty of the input
         */
        "valid"?: boolean;
        /**
          * Manual validation
         */
        "validate"?: boolean;
        /**
          * Validate the input on blur
         */
        "validateOnBlur"?: boolean;
        /**
          * Custom validation message
         */
        "validation"?: string;
        /**
          * Selected item
         */
        "value"?: string | number | CSelectItem;
    }
    interface CSidenavigation {
        /**
          * Mobile version menu visibility
         */
        "menuVisible"?: boolean;
        /**
          * Mobile version
         */
        "mobile"?: boolean;
    }
    interface CSidenavigationitem {
        /**
          * Indicate active state
         */
        "active"?: boolean;
        /**
          * Hyperlink url
         */
        "href"?: string;
        /**
          * Emit changes to the c-accordion
          * @private
         */
        "onItemChange"?: (event: CustomEvent<any>) => void;
    }
    interface CSpacer {
    }
    interface CSubnavigationitem {
        /**
          * Active state
         */
        "active"?: boolean;
        /**
          * Link url
         */
        "href"?: string;
    }
    interface CSwiper {
        /**
          * Value of the swiper
         */
        "value"?: number | string;
    }
    interface CSwiperTab {
        /**
          * Mark as active
         */
        "active"?: boolean;
        /**
          * Disable button
         */
        "disabled"?: boolean;
        /**
          * Id of the button
         */
        "hostId"?: string;
        /**
          * Label of the button
         */
        "label"?: string;
        /**
          * Emit value change to the parent
         */
        "onChangeValue"?: (event: CustomEvent<number | string>) => void;
        /**
          * Emit tab focus to the parent
          * @private
         */
        "onFocusTab"?: (event: CustomEvent<any>) => void;
        /**
          * Emit tab change to parent
          * @private
         */
        "onTabChange"?: (event: CustomEvent<any>) => void;
        /**
          * Value of the button
         */
        "value"?: number | string;
    }
    interface CSwitch {
        /**
          * Disable the switch
         */
        "hostDisabled"?: boolean;
        /**
          * Id for the element
         */
        "hostId"?: string;
        /**
          * Emit inner value change to parent
         */
        "onChangeValue"?: (event: CustomEvent<boolean>) => void;
        /**
          * Value of the element
         */
        "value"?: boolean;
    }
    interface CTab {
        /**
          * Mark tab as active
         */
        "active"?: boolean;
        /**
          * Mark tab as disabled
         */
        "disabled"?: boolean;
        /**
          * Id of the tab
         */
        "hostId"?: string;
        /**
          * Emit changes to the parent
          * @private
         */
        "onTabChange"?: (event: CustomEvent<any>) => void;
        /**
          * Value for the tab - for use in c-tabs
         */
        "value"?: number | string;
    }
    interface CTabButtons {
        /**
          * Disable tab buttons
         */
        "hostDisabled"?: boolean;
        /**
          * Always require a selection
         */
        "mandatory"?: boolean;
        /**
          * Emit changes to the parent
         */
        "onChangeValue"?: (event: CustomEvent<number | string>) => void;
        /**
          * Size of the buttons
         */
        "size"?: 'default' | 'small';
        /**
          * Value of tab buttons
         */
        "value": number | string;
    }
    interface CTabs {
        /**
          * Disable the bottom border
         */
        "borderless"?: boolean;
        /**
          * Emit changes to the parent
         */
        "onChangeValue"?: (event: CustomEvent<any>) => void;
        /**
          * Currently active tab
         */
        "value": number | string;
    }
    interface CTag {
        /**
          * Mark tag as active
         */
        "active"?: boolean;
        /**
          * Mark tag as closeable
         */
        "closeable"?: boolean;
        /**
          * Stretch to fill the container
         */
        "fit"?: boolean;
    }
    interface CTextField {
        /**
          * Auto focus the input
         */
        "autofocus"?: boolean;
        /**
          * Disable the input
         */
        "disabled"?: boolean;
        /**
          * Render a hidden input outside the shadow dom
         */
        "form"?: boolean;
        /**
          * Hide the hint and error messages
         */
        "hideDetails"?: boolean;
        /**
          * Hint text for the input
         */
        "hint"?: string;
        /**
          * Id of the input
         */
        "hostId"?: string;
        /**
          * Label of the input
         */
        "label"?: string;
        /**
          * Maximum value on a numeric input
         */
        "max"?: number;
        /**
          * Minimum value on a numeric input
         */
        "min"?: number;
        /**
          * Name of the input
         */
        "name"?: string;
        /**
          * Numeric input
          * @deprecated Use type="number" instead
         */
        "number"?: boolean;
        /**
          * Emit changes to the parent
         */
        "onChangeValue"?: (event: CustomEvent<any>) => void;
        /**
          * Placeholder of the input
         */
        "placeholder"?: string;
        /**
          * Mark as readonly
         */
        "readonly"?: boolean;
        /**
          * Set the input as required
         */
        "required"?: boolean;
        /**
          * Rows on the input
         */
        "rows"?: number;
        /**
          * Shadow variant of the input
         */
        "shadow"?: boolean;
        /**
          * Step size on a numeric input
         */
        "step"?: number;
        /**
          * Type of the input
         */
        "type"?: string;
        /**
          * Set the validíty of the input
         */
        "valid"?: boolean;
        /**
          * Manual validation
         */
        "validate"?: boolean;
        /**
          * Validate the input on blur
         */
        "validateOnBlur"?: boolean;
        /**
          * Custom validation message
         */
        "validation"?: string;
        /**
          * Value of the input
         */
        "value"?: string;
    }
    interface CTitle {
    }
    interface CToolbar {
    }
    interface IntrinsicElements {
        "c-accordion": CAccordion;
        "c-accordion-item": CAccordionItem;
        "c-autocomplete": CAutocomplete;
        "c-button": CButton;
        "c-card": CCard;
        "c-card-actions": CCardActions;
        "c-card-content": CCardContent;
        "c-card-title": CCardTitle;
        "c-checkbox": CCheckbox;
        "c-consent": CConsent;
        "c-container": CContainer;
        "c-csc-logo": CCscLogo;
        "c-flex": CFlex;
        "c-icon-button": CIconButton;
        "c-input": CInput;
        "c-link": CLink;
        "c-loader": CLoader;
        "c-main": CMain;
        "c-menu": CMenu;
        "c-menu-item": CMenuItem;
        "c-modal": CModal;
        "c-navigationbutton": CNavigationbutton;
        "c-notification": CNotification;
        "c-pagination": CPagination;
        "c-progress-bar": CProgressBar;
        "c-radio-group": CRadioGroup;
        "c-row": CRow;
        "c-select": CSelect;
        "c-sidenavigation": CSidenavigation;
        "c-sidenavigationitem": CSidenavigationitem;
        "c-spacer": CSpacer;
        "c-subnavigationitem": CSubnavigationitem;
        "c-swiper": CSwiper;
        "c-swiper-tab": CSwiperTab;
        "c-switch": CSwitch;
        "c-tab": CTab;
        "c-tab-buttons": CTabButtons;
        "c-tabs": CTabs;
        "c-tag": CTag;
        "c-text-field": CTextField;
        "c-title": CTitle;
        "c-toolbar": CToolbar;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "c-accordion": LocalJSX.CAccordion & JSXBase.HTMLAttributes<HTMLCAccordionElement>;
            "c-accordion-item": LocalJSX.CAccordionItem & JSXBase.HTMLAttributes<HTMLCAccordionItemElement>;
            "c-autocomplete": LocalJSX.CAutocomplete & JSXBase.HTMLAttributes<HTMLCAutocompleteElement>;
            "c-button": LocalJSX.CButton & JSXBase.HTMLAttributes<HTMLCButtonElement>;
            "c-card": LocalJSX.CCard & JSXBase.HTMLAttributes<HTMLCCardElement>;
            "c-card-actions": LocalJSX.CCardActions & JSXBase.HTMLAttributes<HTMLCCardActionsElement>;
            "c-card-content": LocalJSX.CCardContent & JSXBase.HTMLAttributes<HTMLCCardContentElement>;
            "c-card-title": LocalJSX.CCardTitle & JSXBase.HTMLAttributes<HTMLCCardTitleElement>;
            "c-checkbox": LocalJSX.CCheckbox & JSXBase.HTMLAttributes<HTMLCCheckboxElement>;
            "c-consent": LocalJSX.CConsent & JSXBase.HTMLAttributes<HTMLCConsentElement>;
            "c-container": LocalJSX.CContainer & JSXBase.HTMLAttributes<HTMLCContainerElement>;
            "c-csc-logo": LocalJSX.CCscLogo & JSXBase.HTMLAttributes<HTMLCCscLogoElement>;
            "c-flex": LocalJSX.CFlex & JSXBase.HTMLAttributes<HTMLCFlexElement>;
            "c-icon-button": LocalJSX.CIconButton & JSXBase.HTMLAttributes<HTMLCIconButtonElement>;
            "c-input": LocalJSX.CInput & JSXBase.HTMLAttributes<HTMLCInputElement>;
            "c-link": LocalJSX.CLink & JSXBase.HTMLAttributes<HTMLCLinkElement>;
            "c-loader": LocalJSX.CLoader & JSXBase.HTMLAttributes<HTMLCLoaderElement>;
            "c-main": LocalJSX.CMain & JSXBase.HTMLAttributes<HTMLCMainElement>;
            "c-menu": LocalJSX.CMenu & JSXBase.HTMLAttributes<HTMLCMenuElement>;
            "c-menu-item": LocalJSX.CMenuItem & JSXBase.HTMLAttributes<HTMLCMenuItemElement>;
            "c-modal": LocalJSX.CModal & JSXBase.HTMLAttributes<HTMLCModalElement>;
            "c-navigationbutton": LocalJSX.CNavigationbutton & JSXBase.HTMLAttributes<HTMLCNavigationbuttonElement>;
            "c-notification": LocalJSX.CNotification & JSXBase.HTMLAttributes<HTMLCNotificationElement>;
            "c-pagination": LocalJSX.CPagination & JSXBase.HTMLAttributes<HTMLCPaginationElement>;
            "c-progress-bar": LocalJSX.CProgressBar & JSXBase.HTMLAttributes<HTMLCProgressBarElement>;
            "c-radio-group": LocalJSX.CRadioGroup & JSXBase.HTMLAttributes<HTMLCRadioGroupElement>;
            "c-row": LocalJSX.CRow & JSXBase.HTMLAttributes<HTMLCRowElement>;
            "c-select": LocalJSX.CSelect & JSXBase.HTMLAttributes<HTMLCSelectElement>;
            "c-sidenavigation": LocalJSX.CSidenavigation & JSXBase.HTMLAttributes<HTMLCSidenavigationElement>;
            "c-sidenavigationitem": LocalJSX.CSidenavigationitem & JSXBase.HTMLAttributes<HTMLCSidenavigationitemElement>;
            "c-spacer": LocalJSX.CSpacer & JSXBase.HTMLAttributes<HTMLCSpacerElement>;
            "c-subnavigationitem": LocalJSX.CSubnavigationitem & JSXBase.HTMLAttributes<HTMLCSubnavigationitemElement>;
            "c-swiper": LocalJSX.CSwiper & JSXBase.HTMLAttributes<HTMLCSwiperElement>;
            "c-swiper-tab": LocalJSX.CSwiperTab & JSXBase.HTMLAttributes<HTMLCSwiperTabElement>;
            "c-switch": LocalJSX.CSwitch & JSXBase.HTMLAttributes<HTMLCSwitchElement>;
            "c-tab": LocalJSX.CTab & JSXBase.HTMLAttributes<HTMLCTabElement>;
            "c-tab-buttons": LocalJSX.CTabButtons & JSXBase.HTMLAttributes<HTMLCTabButtonsElement>;
            "c-tabs": LocalJSX.CTabs & JSXBase.HTMLAttributes<HTMLCTabsElement>;
            "c-tag": LocalJSX.CTag & JSXBase.HTMLAttributes<HTMLCTagElement>;
            "c-text-field": LocalJSX.CTextField & JSXBase.HTMLAttributes<HTMLCTextFieldElement>;
            "c-title": LocalJSX.CTitle & JSXBase.HTMLAttributes<HTMLCTitleElement>;
            "c-toolbar": LocalJSX.CToolbar & JSXBase.HTMLAttributes<HTMLCToolbarElement>;
        }
    }
}
