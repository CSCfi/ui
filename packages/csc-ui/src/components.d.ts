/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { CAlertType, CAutocompleteItem, CDataTableData, CDataTableFooterOptions, CDataTableHeader, CPaginationOptions, CRadioGroupItem, CSelectItem, CToastMessage } from "./types";
import { CardBackground } from "./components/c-card/c-card";
import { CLoginCardBlendMode } from "./components/c-login-card/c-login-card";
export namespace Components {
    interface CAccordion {
        /**
          * Disallow collapsing all the items
         */
        "mandatory": boolean;
        /**
          * Allow expanding multiple items
         */
        "multiple": boolean;
        /**
          * Show an outline around expanded items
         */
        "outlined": boolean;
        /**
          * Value of the accordion
         */
        "value": number | string | (number | string)[];
    }
    interface CAccordionItem {
        /**
          * Marks the item as collapsable
          * @private
         */
        "collapsable": boolean;
        /**
          * Expansion status of the item
         */
        "expanded": boolean;
        /**
          * Heading of the accordion item
         */
        "heading": string;
        /**
          * Icon
          * @deprecated Please use the icon slot instead
         */
        "icon": 'enabled' | 'disabled' | 'bell' | 'pending';
        /**
          * Show an outline around the expanded item
          * @private
         */
        "outlined": boolean;
        /**
          * Value of the accordion item
         */
        "value": number | string;
    }
    interface CAlert {
        /**
          * Type of the alert
         */
        "type"?: CAlertType;
    }
    interface CAutocomplete {
        /**
          * Auto focus the input
         */
        "autofocus": boolean;
        /**
          * Dense variant
         */
        "dense": boolean;
        /**
          * Disable the input
         */
        "disabled": boolean;
        /**
          * Hide the hint and error messages
         */
        "hideDetails": boolean;
        /**
          * Hint text for the input
         */
        "hint": string;
        /**
          * Id of the element
         */
        "hostId": string;
        /**
          * Items to be selected
         */
        "items": CAutocompleteItem[];
        /**
          * Items per page before adding scroll
         */
        "itemsPerPage": number;
        /**
          * Element label
         */
        "label": string;
        /**
          * Input field name
         */
        "name": string;
        /**
          * Placeholder text
         */
        "placeholder": string;
        /**
          * Search string
         */
        "query": string;
        /**
          * Show required validation
         */
        "required": boolean;
        /**
          * Return only the item value rather than the whole item object
         */
        "returnValue": false;
        /**
          * Shadow variant
         */
        "shadow": boolean;
        /**
          * Set the validíty of the input
         */
        "valid": boolean;
        /**
          * Manual validation
         */
        "validate": boolean;
        /**
          * Validate the input on blur
         */
        "validateOnBlur": boolean;
        /**
          * Custom validation message
         */
        "validation": string;
        /**
          * Selected item
         */
        "value": string | number | CAutocompleteItem;
    }
    interface CButton {
        /**
          * Disable the button
         */
        "disabled": boolean;
        /**
          * Fit width to containing element
         */
        "fit": boolean;
        /**
          * Light button background
         */
        "ghost": boolean;
        /**
          * True when used as a tab button
          * @private
         */
        "grouped": boolean;
        /**
          * Id of the button
         */
        "hostId": string;
        /**
          * Hyperlink url
         */
        "href": string;
        /**
          * Name of the icon to be displayed in the button
          * @deprecated Please use the icon slot instead
         */
        "icon": 'plus' | 'minus' | 'account' | 'edit';
        /**
          * Inverted button style for dark backgrounds
         */
        "inverted": boolean;
        /**
          * Display loader on the button
         */
        "loading": boolean;
        /**
          * Remove the default border radius
         */
        "noRadius": boolean;
        /**
          * Outlined button style
         */
        "outlined": boolean;
        /**
          * Path for the svg icon
         */
        "path": string;
        /**
          * Size of the button
         */
        "size": 'default' | 'small' | 'large';
        /**
          * Hyperlink target
         */
        "target": string;
        /**
          * Transparent button background
         */
        "text": boolean;
        /**
          * Button type
         */
        "type": 'button' | 'submit';
        /**
          * Value for the button - for use in the c-tab-buttons
         */
        "value"?: number | string;
    }
    interface CCard {
        /**
          * Card background image for login pages of specific services
         */
        "background": CardBackground;
        /**
          * Background color
         */
        "backgroundColor": string;
    }
    interface CCardActions {
        /**
          * Align the actions
         */
        "align": 'start' | 'center' | 'end';
        /**
          * Justify the actions
         */
        "justify": | 'start'
    | 'center'
    | 'end'
    | 'space-between'
    | 'stretch'
    | 'space-around';
    }
    interface CCardContent {
    }
    interface CCardTitle {
    }
    interface CCheckbox {
        /**
          * Disable the checkbox
         */
        "disabled": boolean;
        /**
          * Hide the hint and error messages
         */
        "hideDetails": boolean;
        /**
          * Hint text for the input
         */
        "hint": string;
        /**
          * Element label
         */
        "label": string;
        /**
          * Set the validíty of the input
         */
        "valid": boolean;
        /**
          * Custom validation message
         */
        "validation": string;
        /**
          * Is the element checked
         */
        "value": boolean;
    }
    interface CConsent {
    }
    interface CContainer {
        /**
          * Maximum width of container in pixels
         */
        "width": number;
    }
    interface CCscLogo {
        /**
          * Logo width in pixels
         */
        "width": number;
    }
    interface CDataTable {
        /**
          * Data of the table
         */
        "data": CDataTableData[];
        /**
          * Externally sorted and paginated data
         */
        "externalData": boolean;
        /**
          * Items per page options
         */
        "footerOptions": CDataTableFooterOptions;
        /**
          * Headers of the table
         */
        "headers": CDataTableHeader[];
        /**
          * Show a loader on top of the table
         */
        "loading": boolean;
        /**
          * Text shown when there is no data and the table is loading
         */
        "loadingText": string;
        /**
          * Text shown when there are no data available
         */
        "noDataText": string;
        /**
          * Pagination options
         */
        "pagination": CPaginationOptions;
        /**
          * Make rows selectable
         */
        "selectable": boolean;
        /**
          * Property used in selections
         */
        "selectionProperty": string;
        /**
          * Allow only a single row expanded at a time
         */
        "singleExpansion": boolean;
        /**
          * Sort data by
         */
        "sortBy": any;
        /**
          * Sorting direction
         */
        "sortDirection": 'asc' | 'desc' | null;
    }
    interface CFlex {
    }
    interface CIconButton {
        /**
          * Show a badge on top of the icon
         */
        "badge": string;
        /**
          * Disable the button
         */
        "disabled": boolean;
        /**
          * Ghost variant of the button
         */
        "ghost": boolean;
        /**
          * Inverted color for dark backgrounds
         */
        "inverted": boolean;
        /**
          * Outlined variant of the button
         */
        "outlined": boolean;
        /**
          * Path for the svg icon
         */
        "path": string;
        /**
          * Size of the button
         */
        "size": 'default' | 'x-small' | 'small';
        /**
          * Text variant of the button
         */
        "text": boolean;
    }
    interface CInput {
        /**
          * Auto focus the input
         */
        "autofocus": boolean;
        /**
          * Disable the input
         */
        "disabled": boolean;
        /**
          * Render a hidden input outside the shadow dom
         */
        "form": boolean;
        /**
          * Hide the hint and error messages
         */
        "hideDetails": boolean;
        /**
          * Hint text for the input
         */
        "hint": string;
        /**
          * Id of the input
         */
        "hostId": string;
        /**
          * Id of the input element
         */
        "inputId": string;
        /**
          * Label of the input
         */
        "label": string;
        /**
          * Maximum value on a numeric input
         */
        "max": number;
        /**
          * Minimum value on a numeric input
         */
        "min": number;
        /**
          * Name of the input
         */
        "name": string;
        /**
          * Numeric input
          * @deprecated Use type="number" instead
         */
        "number": boolean;
        /**
          * Placeholder of the input
         */
        "placeholder": string;
        /**
          * Mark as readonly
         */
        "readonly": boolean;
        /**
          * Set the input as required
         */
        "required": boolean;
        /**
          * Rows on the input
         */
        "rows": number;
        /**
          * Shadow variant of the input
         */
        "shadow": boolean;
        /**
          * Step size on a numeric input
         */
        "step": number;
        /**
          * Type of the input
         */
        "type": string;
        /**
          * Set the validíty of the input
         */
        "valid": boolean;
        /**
          * Manual validation
         */
        "validate": boolean;
        /**
          * Validate the input on blur
         */
        "validateOnBlur": boolean;
        /**
          * Custom validation message
         */
        "validation": string;
        /**
          * Value of the input
         */
        "value": string | number | boolean | CSelectItem | CAutocompleteItem;
        /**
          * Variant
         */
        "variant": 'text' | 'select';
    }
    interface CLink {
        /**
          * Url of link
         */
        "href": string;
        /**
          * regular target attribute of a hyperlink
         */
        "target": string;
        /**
          * Display line under the link
         */
        "underline": boolean;
    }
    interface CLoader {
        /**
          * Delay in seconds of showing the contents in the slot of the loader
         */
        "contentdelay": number;
        /**
          * Hide the loader
         */
        "hide": boolean;
        /**
          * Size of the loader
         */
        "size": number;
    }
    interface CLoginButton {
        /**
          * Alt description for logo
         */
        "alt": string;
        /**
          * Login provider link
         */
        "href": string;
        /**
          * Login provider logo url
         */
        "src": string;
    }
    interface CLoginButtons {
    }
    interface CLoginCard {
        /**
          * Background position (css background-position)
         */
        "backgroundPosition": string;
        /**
          * Mobile breakpoint in pixels
         */
        "mobileBreakpoint": number;
        /**
          * Add colored overlay to the background image
         */
        "overlay": boolean;
        /**
          * Add colored overlay to the background image
         */
        "overlayBlendMode": CLoginCardBlendMode;
        /**
          * Background image
         */
        "src": string;
    }
    interface CLoginCardActions {
        /**
          * Align the actions
         */
        "align": 'start' | 'center' | 'end';
        /**
          * Justify the actions
         */
        "justify": | 'start'
    | 'center'
    | 'end'
    | 'space-between'
    | 'stretch'
    | 'space-around';
    }
    interface CLoginCardContent {
    }
    interface CLoginCardTitle {
    }
    interface CMain {
    }
    interface CMenu {
        /**
          * Menu items
         */
        "items": {
    name: string;
    action: () => void;
    disabled?: boolean;
    icon?: string;
    iconPosition?: 'start' | 'end';
  }[];
        /**
          * No hover background
         */
        "nohover": boolean;
        /**
          * Simple variant without chevron and background, E.g. when a button is the activator
         */
        "simple": boolean;
        /**
          * Small variant
         */
        "small": boolean;
    }
    interface CMenuItem {
        /**
          * Is the item the active selection
         */
        "active": boolean;
        /**
          * Small variant
         */
        "small": boolean;
    }
    interface CModal {
        /**
          * Dismissed when touching/clicking outside the content
         */
        "dismissable": boolean;
        /**
          * Is the modal visible
         */
        "value": boolean;
        /**
          * Width of the dialog. Numeric value is considered as pixel value (400 -> 400px)
         */
        "width": string | number;
    }
    interface CNavigationbutton {
    }
    interface CNotification {
        /**
          * notification contents
         */
        "notification": {
    name: string;
    type: 'warning' | 'error' | 'success' | 'info';
    delay?: number;
    requiresClosing?: boolean;
  };
        /**
          * Position of the notifications
         */
        "position": 'fixed' | 'absolute';
    }
    interface CPagination {
        /**
          * Hide details (per page dropdown and the 'x - y of n pages' text)
         */
        "hideDetails": boolean;
        /**
          * Hide range indicator
         */
        "hideRange": boolean;
        /**
          * Items per page options
         */
        "itemsPerPageOptions": number[];
        /**
          * Hide page number buttons
         */
        "simple": boolean;
        /**
          * Hide details (per page dropdown and the 'x - y of n pages' text)
         */
        "size": 'default' | 'small';
        /**
          * Object containing values that are needed for pagination.  Note! startFrom and endTo are assigned automatically to the object based on other values
         */
        "value": CPaginationOptions;
    }
    interface CProgressBar {
        /**
          * Color of the bar (valid css color)
          * @default var(--csc-primary)
         */
        "color": string;
        /**
          * Hide the percentage display
         */
        "hideDetails": boolean;
        /**
          * Indeterminate state of the progress bar
         */
        "indeterminate": boolean;
        /**
          * Optional details message next to percentage display
         */
        "label": string;
        /**
          * Place details next to progress bar
         */
        "singleLine": boolean;
        /**
          * Progress bar value in percentage (0 to 100)
         */
        "value": number;
    }
    interface CRadioGroup {
        /**
          * Color of the radio group
         */
        "color": string;
        /**
          * Disable the radio group
         */
        "disabled": boolean;
        /**
          * Hide the hint and error messages
         */
        "hideDetails": boolean;
        /**
          * Hint text for the input
         */
        "hint": string;
        /**
          * Display radio buttons inline
         */
        "inline": boolean;
        /**
          * Radio group items
         */
        "items": CRadioGroupItem[];
        /**
          * Label of the radio group
         */
        "label": string;
        /**
          * Return only the item value rather than the whole item object
         */
        "returnValue": false;
        /**
          * Set the validíty of the input
         */
        "valid": boolean;
        /**
          * Custom validation message
         */
        "validation": string;
        /**
          * Value of the radio group
         */
        "value": string | number | CRadioGroupItem;
    }
    interface CRow {
        /**
          * Align items vertically
         */
        "align": 'start' | 'center' | 'end';
        /**
          * Gap between items in px
         */
        "gap": number;
        /**
          * Justify content horizontally
         */
        "justify": | 'start'
    | 'center'
    | 'end'
    | 'space-between'
    | 'space-around';
        /**
          * Disable flex wrap
         */
        "nowrap": boolean;
    }
    interface CSelect {
        /**
          * Auto focus the input
         */
        "autofocus": boolean;
        /**
          * Disable the input
         */
        "disabled": boolean;
        /**
          * Hide the hint and error messages
         */
        "hideDetails": boolean;
        /**
          * Hint text for the input
         */
        "hint": string;
        /**
          * Id of the element
         */
        "hostId": string;
        /**
          * selectable items
         */
        "items": CSelectItem[];
        /**
          * Items per page before adding scroll
         */
        "itemsPerPage": number;
        /**
          * Element label
         */
        "label": string;
        /**
          * Input field name
         */
        "name": string;
        /**
          * Placeholder text
         */
        "placeholder": string;
        /**
          * Show required validation
         */
        "required": boolean;
        /**
          * Return only the item value rather than the whole item object
         */
        "returnValue": false;
        /**
          * Shadow variant
         */
        "shadow": boolean;
        /**
          * Set the validíty of the input
         */
        "valid": boolean;
        /**
          * Manual validation
         */
        "validate": boolean;
        /**
          * Validate the input on blur
         */
        "validateOnBlur": boolean;
        /**
          * Custom validation message
         */
        "validation": string;
        /**
          * Selected item
         */
        "value": string | number | boolean | CSelectItem;
    }
    interface CSidenavigation {
        /**
          * Mobile version menu visibility
         */
        "menuVisible": boolean;
        /**
          * Mobile version
         */
        "mobile": boolean;
    }
    interface CSidenavigationitem {
        /**
          * Indicate active state
         */
        "active": boolean;
        /**
          * Hyperlink url
         */
        "href": string;
        /**
          * Loading state
         */
        "loading": boolean;
    }
    interface CSpacer {
    }
    interface CStatus {
        /**
          * Status type
         */
        "type"?: 'info' | 'warning' | 'error' | 'success';
    }
    interface CSubnavigationitem {
        /**
          * Active state
         */
        "active": boolean;
        /**
          * Element is visible and focusable
         */
        "focusable": boolean;
        /**
          * Link url
         */
        "href": string;
        /**
          * Loading state
         */
        "loading": boolean;
    }
    interface CSwiper {
        /**
          * Value of the swiper
         */
        "value": number | string;
    }
    interface CSwiperTab {
        /**
          * Mark as active
         */
        "active": boolean;
        /**
          * Disable button
         */
        "disabled": boolean;
        /**
          * Id of the button
         */
        "hostId": string;
        /**
          * Label of the button
         */
        "label": string;
        /**
          * Position in the set
          * @private
         */
        "position": number;
        /**
          * Size of the set
          * @private
         */
        "setsize": number;
        /**
          * Value of the button
         */
        "value": number | string;
    }
    interface CSwitch {
        /**
          * Disable the switch
         */
        "hostDisabled": boolean;
        /**
          * Id for the element
         */
        "hostId": string;
        /**
          * Value of the element
         */
        "value": boolean;
    }
    interface CTab {
        /**
          * Mark tab as active
         */
        "active": boolean;
        /**
          * Mark tab as disabled
         */
        "disabled": boolean;
        /**
          * Id of the tab
         */
        "hostId": string;
        /**
          * Position in the set
          * @private
         */
        "position": number;
        /**
          * Size of the set
          * @private
         */
        "setsize": number;
        /**
          * Value for the tab - for use in c-tabs
         */
        "value"?: number | string;
    }
    interface CTabButtons {
        /**
          * Disable tab buttons
         */
        "hostDisabled": boolean;
        /**
          * Always require a selection
         */
        "mandatory": boolean;
        /**
          * Size of the buttons
         */
        "size": 'default' | 'small';
        /**
          * Value of tab buttons
         */
        "value": number | string;
    }
    interface CTabs {
        /**
          * Disable the bottom border
         */
        "borderless": boolean;
        /**
          * Currently active tab
         */
        "value": number | string;
    }
    interface CTag {
        /**
          * Mark tag as active
         */
        "active": boolean;
        /**
          * Display an optional badge at the start of the tag
         */
        "badge": string | number;
        /**
          * Mark tag as closeable
         */
        "closeable": boolean;
        /**
          * Stretch to fill the container
         */
        "fit": boolean;
        /**
          * Remove the hover effect
         */
        "flat": boolean;
    }
    interface CTextField {
        /**
          * Auto focus the input
         */
        "autofocus": boolean;
        /**
          * Disable the input
         */
        "disabled": boolean;
        /**
          * Hide the hint and error messages
         */
        "hideDetails": boolean;
        /**
          * Hint text for the input
         */
        "hint": string;
        /**
          * Id of the input
         */
        "hostId": string;
        /**
          * Label of the input
         */
        "label": string;
        /**
          * Maximum value on a numeric input
         */
        "max": number;
        /**
          * Minimum value on a numeric input
         */
        "min": number;
        /**
          * Name of the input
         */
        "name": string;
        /**
          * Numeric input
          * @deprecated Use type="number" instead
         */
        "number": boolean;
        /**
          * Placeholder of the input
         */
        "placeholder": string;
        /**
          * Mark as readonly
         */
        "readonly": boolean;
        /**
          * Set the input as required
         */
        "required": boolean;
        /**
          * Rows on the input
         */
        "rows": number;
        /**
          * Shadow variant of the input
         */
        "shadow": boolean;
        /**
          * Step size on a numeric input
         */
        "step": number;
        /**
          * Trim whitespace from the return value
         */
        "trimWhitespace": boolean;
        /**
          * Type of the input
         */
        "type": string;
        /**
          * Set the validíty of the input
         */
        "valid": boolean;
        /**
          * Manual validation
         */
        "validate": boolean;
        /**
          * Validate the input on blur
         */
        "validateOnBlur": boolean;
        /**
          * Custom validation message
         */
        "validation": string;
        /**
          * Value of the input
         */
        "value": string;
    }
    interface CTitle {
    }
    interface CToast {
        /**
          * Close toast
          * @emits close
         */
        "closeToast": () => Promise<void>;
        /**
          * Messages
         */
        "message": CToastMessage;
    }
    interface CToasts {
        /**
          * Use absolute positioning
         */
        "absolute": boolean;
        /**
          * Add a new message
         */
        "addToast": (message: CToastMessage) => Promise<void>;
        /**
          * Horizontal position
         */
        "horizontal": 'left' | 'center' | 'right';
        /**
          * Remove a message by id (id should be specified in the addToast params)
         */
        "removeToast": (id: string) => Promise<void>;
        /**
          * Vertical position
         */
        "vertical": 'top' | 'bottom';
    }
    interface CToolbar {
    }
}
export interface CAccordionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCAccordionElement;
}
export interface CAccordionItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCAccordionItemElement;
}
export interface CAutocompleteCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCAutocompleteElement;
}
export interface CButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCButtonElement;
}
export interface CCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCCheckboxElement;
}
export interface CDataTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCDataTableElement;
}
export interface CInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCInputElement;
}
export interface CModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCModalElement;
}
export interface CPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCPaginationElement;
}
export interface CRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCRadioGroupElement;
}
export interface CSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCSelectElement;
}
export interface CSidenavigationitemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCSidenavigationitemElement;
}
export interface CSwiperCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCSwiperElement;
}
export interface CSwiperTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCSwiperTabElement;
}
export interface CSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCSwitchElement;
}
export interface CTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCTabElement;
}
export interface CTabButtonsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCTabButtonsElement;
}
export interface CTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCTabsElement;
}
export interface CTextFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCTextFieldElement;
}
export interface CToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCToastElement;
}
declare global {
    interface HTMLCAccordionElement extends Components.CAccordion, HTMLStencilElement {
    }
    var HTMLCAccordionElement: {
        prototype: HTMLCAccordionElement;
        new (): HTMLCAccordionElement;
    };
    interface HTMLCAccordionItemElement extends Components.CAccordionItem, HTMLStencilElement {
    }
    var HTMLCAccordionItemElement: {
        prototype: HTMLCAccordionItemElement;
        new (): HTMLCAccordionItemElement;
    };
    interface HTMLCAlertElement extends Components.CAlert, HTMLStencilElement {
    }
    var HTMLCAlertElement: {
        prototype: HTMLCAlertElement;
        new (): HTMLCAlertElement;
    };
    interface HTMLCAutocompleteElement extends Components.CAutocomplete, HTMLStencilElement {
    }
    var HTMLCAutocompleteElement: {
        prototype: HTMLCAutocompleteElement;
        new (): HTMLCAutocompleteElement;
    };
    interface HTMLCButtonElement extends Components.CButton, HTMLStencilElement {
    }
    var HTMLCButtonElement: {
        prototype: HTMLCButtonElement;
        new (): HTMLCButtonElement;
    };
    interface HTMLCCardElement extends Components.CCard, HTMLStencilElement {
    }
    var HTMLCCardElement: {
        prototype: HTMLCCardElement;
        new (): HTMLCCardElement;
    };
    interface HTMLCCardActionsElement extends Components.CCardActions, HTMLStencilElement {
    }
    var HTMLCCardActionsElement: {
        prototype: HTMLCCardActionsElement;
        new (): HTMLCCardActionsElement;
    };
    interface HTMLCCardContentElement extends Components.CCardContent, HTMLStencilElement {
    }
    var HTMLCCardContentElement: {
        prototype: HTMLCCardContentElement;
        new (): HTMLCCardContentElement;
    };
    interface HTMLCCardTitleElement extends Components.CCardTitle, HTMLStencilElement {
    }
    var HTMLCCardTitleElement: {
        prototype: HTMLCCardTitleElement;
        new (): HTMLCCardTitleElement;
    };
    interface HTMLCCheckboxElement extends Components.CCheckbox, HTMLStencilElement {
    }
    var HTMLCCheckboxElement: {
        prototype: HTMLCCheckboxElement;
        new (): HTMLCCheckboxElement;
    };
    interface HTMLCConsentElement extends Components.CConsent, HTMLStencilElement {
    }
    var HTMLCConsentElement: {
        prototype: HTMLCConsentElement;
        new (): HTMLCConsentElement;
    };
    interface HTMLCContainerElement extends Components.CContainer, HTMLStencilElement {
    }
    var HTMLCContainerElement: {
        prototype: HTMLCContainerElement;
        new (): HTMLCContainerElement;
    };
    interface HTMLCCscLogoElement extends Components.CCscLogo, HTMLStencilElement {
    }
    var HTMLCCscLogoElement: {
        prototype: HTMLCCscLogoElement;
        new (): HTMLCCscLogoElement;
    };
    interface HTMLCDataTableElement extends Components.CDataTable, HTMLStencilElement {
    }
    var HTMLCDataTableElement: {
        prototype: HTMLCDataTableElement;
        new (): HTMLCDataTableElement;
    };
    interface HTMLCFlexElement extends Components.CFlex, HTMLStencilElement {
    }
    var HTMLCFlexElement: {
        prototype: HTMLCFlexElement;
        new (): HTMLCFlexElement;
    };
    interface HTMLCIconButtonElement extends Components.CIconButton, HTMLStencilElement {
    }
    var HTMLCIconButtonElement: {
        prototype: HTMLCIconButtonElement;
        new (): HTMLCIconButtonElement;
    };
    interface HTMLCInputElement extends Components.CInput, HTMLStencilElement {
    }
    var HTMLCInputElement: {
        prototype: HTMLCInputElement;
        new (): HTMLCInputElement;
    };
    interface HTMLCLinkElement extends Components.CLink, HTMLStencilElement {
    }
    var HTMLCLinkElement: {
        prototype: HTMLCLinkElement;
        new (): HTMLCLinkElement;
    };
    interface HTMLCLoaderElement extends Components.CLoader, HTMLStencilElement {
    }
    var HTMLCLoaderElement: {
        prototype: HTMLCLoaderElement;
        new (): HTMLCLoaderElement;
    };
    interface HTMLCLoginButtonElement extends Components.CLoginButton, HTMLStencilElement {
    }
    var HTMLCLoginButtonElement: {
        prototype: HTMLCLoginButtonElement;
        new (): HTMLCLoginButtonElement;
    };
    interface HTMLCLoginButtonsElement extends Components.CLoginButtons, HTMLStencilElement {
    }
    var HTMLCLoginButtonsElement: {
        prototype: HTMLCLoginButtonsElement;
        new (): HTMLCLoginButtonsElement;
    };
    interface HTMLCLoginCardElement extends Components.CLoginCard, HTMLStencilElement {
    }
    var HTMLCLoginCardElement: {
        prototype: HTMLCLoginCardElement;
        new (): HTMLCLoginCardElement;
    };
    interface HTMLCLoginCardActionsElement extends Components.CLoginCardActions, HTMLStencilElement {
    }
    var HTMLCLoginCardActionsElement: {
        prototype: HTMLCLoginCardActionsElement;
        new (): HTMLCLoginCardActionsElement;
    };
    interface HTMLCLoginCardContentElement extends Components.CLoginCardContent, HTMLStencilElement {
    }
    var HTMLCLoginCardContentElement: {
        prototype: HTMLCLoginCardContentElement;
        new (): HTMLCLoginCardContentElement;
    };
    interface HTMLCLoginCardTitleElement extends Components.CLoginCardTitle, HTMLStencilElement {
    }
    var HTMLCLoginCardTitleElement: {
        prototype: HTMLCLoginCardTitleElement;
        new (): HTMLCLoginCardTitleElement;
    };
    interface HTMLCMainElement extends Components.CMain, HTMLStencilElement {
    }
    var HTMLCMainElement: {
        prototype: HTMLCMainElement;
        new (): HTMLCMainElement;
    };
    interface HTMLCMenuElement extends Components.CMenu, HTMLStencilElement {
    }
    var HTMLCMenuElement: {
        prototype: HTMLCMenuElement;
        new (): HTMLCMenuElement;
    };
    interface HTMLCMenuItemElement extends Components.CMenuItem, HTMLStencilElement {
    }
    var HTMLCMenuItemElement: {
        prototype: HTMLCMenuItemElement;
        new (): HTMLCMenuItemElement;
    };
    interface HTMLCModalElement extends Components.CModal, HTMLStencilElement {
    }
    var HTMLCModalElement: {
        prototype: HTMLCModalElement;
        new (): HTMLCModalElement;
    };
    interface HTMLCNavigationbuttonElement extends Components.CNavigationbutton, HTMLStencilElement {
    }
    var HTMLCNavigationbuttonElement: {
        prototype: HTMLCNavigationbuttonElement;
        new (): HTMLCNavigationbuttonElement;
    };
    interface HTMLCNotificationElement extends Components.CNotification, HTMLStencilElement {
    }
    var HTMLCNotificationElement: {
        prototype: HTMLCNotificationElement;
        new (): HTMLCNotificationElement;
    };
    interface HTMLCPaginationElement extends Components.CPagination, HTMLStencilElement {
    }
    var HTMLCPaginationElement: {
        prototype: HTMLCPaginationElement;
        new (): HTMLCPaginationElement;
    };
    interface HTMLCProgressBarElement extends Components.CProgressBar, HTMLStencilElement {
    }
    var HTMLCProgressBarElement: {
        prototype: HTMLCProgressBarElement;
        new (): HTMLCProgressBarElement;
    };
    interface HTMLCRadioGroupElement extends Components.CRadioGroup, HTMLStencilElement {
    }
    var HTMLCRadioGroupElement: {
        prototype: HTMLCRadioGroupElement;
        new (): HTMLCRadioGroupElement;
    };
    interface HTMLCRowElement extends Components.CRow, HTMLStencilElement {
    }
    var HTMLCRowElement: {
        prototype: HTMLCRowElement;
        new (): HTMLCRowElement;
    };
    interface HTMLCSelectElement extends Components.CSelect, HTMLStencilElement {
    }
    var HTMLCSelectElement: {
        prototype: HTMLCSelectElement;
        new (): HTMLCSelectElement;
    };
    interface HTMLCSidenavigationElement extends Components.CSidenavigation, HTMLStencilElement {
    }
    var HTMLCSidenavigationElement: {
        prototype: HTMLCSidenavigationElement;
        new (): HTMLCSidenavigationElement;
    };
    interface HTMLCSidenavigationitemElement extends Components.CSidenavigationitem, HTMLStencilElement {
    }
    var HTMLCSidenavigationitemElement: {
        prototype: HTMLCSidenavigationitemElement;
        new (): HTMLCSidenavigationitemElement;
    };
    interface HTMLCSpacerElement extends Components.CSpacer, HTMLStencilElement {
    }
    var HTMLCSpacerElement: {
        prototype: HTMLCSpacerElement;
        new (): HTMLCSpacerElement;
    };
    interface HTMLCStatusElement extends Components.CStatus, HTMLStencilElement {
    }
    var HTMLCStatusElement: {
        prototype: HTMLCStatusElement;
        new (): HTMLCStatusElement;
    };
    interface HTMLCSubnavigationitemElement extends Components.CSubnavigationitem, HTMLStencilElement {
    }
    var HTMLCSubnavigationitemElement: {
        prototype: HTMLCSubnavigationitemElement;
        new (): HTMLCSubnavigationitemElement;
    };
    interface HTMLCSwiperElement extends Components.CSwiper, HTMLStencilElement {
    }
    var HTMLCSwiperElement: {
        prototype: HTMLCSwiperElement;
        new (): HTMLCSwiperElement;
    };
    interface HTMLCSwiperTabElement extends Components.CSwiperTab, HTMLStencilElement {
    }
    var HTMLCSwiperTabElement: {
        prototype: HTMLCSwiperTabElement;
        new (): HTMLCSwiperTabElement;
    };
    interface HTMLCSwitchElement extends Components.CSwitch, HTMLStencilElement {
    }
    var HTMLCSwitchElement: {
        prototype: HTMLCSwitchElement;
        new (): HTMLCSwitchElement;
    };
    interface HTMLCTabElement extends Components.CTab, HTMLStencilElement {
    }
    var HTMLCTabElement: {
        prototype: HTMLCTabElement;
        new (): HTMLCTabElement;
    };
    interface HTMLCTabButtonsElement extends Components.CTabButtons, HTMLStencilElement {
    }
    var HTMLCTabButtonsElement: {
        prototype: HTMLCTabButtonsElement;
        new (): HTMLCTabButtonsElement;
    };
    interface HTMLCTabsElement extends Components.CTabs, HTMLStencilElement {
    }
    var HTMLCTabsElement: {
        prototype: HTMLCTabsElement;
        new (): HTMLCTabsElement;
    };
    interface HTMLCTagElement extends Components.CTag, HTMLStencilElement {
    }
    var HTMLCTagElement: {
        prototype: HTMLCTagElement;
        new (): HTMLCTagElement;
    };
    interface HTMLCTextFieldElement extends Components.CTextField, HTMLStencilElement {
    }
    var HTMLCTextFieldElement: {
        prototype: HTMLCTextFieldElement;
        new (): HTMLCTextFieldElement;
    };
    interface HTMLCTitleElement extends Components.CTitle, HTMLStencilElement {
    }
    var HTMLCTitleElement: {
        prototype: HTMLCTitleElement;
        new (): HTMLCTitleElement;
    };
    interface HTMLCToastElement extends Components.CToast, HTMLStencilElement {
    }
    var HTMLCToastElement: {
        prototype: HTMLCToastElement;
        new (): HTMLCToastElement;
    };
    interface HTMLCToastsElement extends Components.CToasts, HTMLStencilElement {
    }
    var HTMLCToastsElement: {
        prototype: HTMLCToastsElement;
        new (): HTMLCToastsElement;
    };
    interface HTMLCToolbarElement extends Components.CToolbar, HTMLStencilElement {
    }
    var HTMLCToolbarElement: {
        prototype: HTMLCToolbarElement;
        new (): HTMLCToolbarElement;
    };
    interface HTMLElementTagNameMap {
        "c-accordion": HTMLCAccordionElement;
        "c-accordion-item": HTMLCAccordionItemElement;
        "c-alert": HTMLCAlertElement;
        "c-autocomplete": HTMLCAutocompleteElement;
        "c-button": HTMLCButtonElement;
        "c-card": HTMLCCardElement;
        "c-card-actions": HTMLCCardActionsElement;
        "c-card-content": HTMLCCardContentElement;
        "c-card-title": HTMLCCardTitleElement;
        "c-checkbox": HTMLCCheckboxElement;
        "c-consent": HTMLCConsentElement;
        "c-container": HTMLCContainerElement;
        "c-csc-logo": HTMLCCscLogoElement;
        "c-data-table": HTMLCDataTableElement;
        "c-flex": HTMLCFlexElement;
        "c-icon-button": HTMLCIconButtonElement;
        "c-input": HTMLCInputElement;
        "c-link": HTMLCLinkElement;
        "c-loader": HTMLCLoaderElement;
        "c-login-button": HTMLCLoginButtonElement;
        "c-login-buttons": HTMLCLoginButtonsElement;
        "c-login-card": HTMLCLoginCardElement;
        "c-login-card-actions": HTMLCLoginCardActionsElement;
        "c-login-card-content": HTMLCLoginCardContentElement;
        "c-login-card-title": HTMLCLoginCardTitleElement;
        "c-main": HTMLCMainElement;
        "c-menu": HTMLCMenuElement;
        "c-menu-item": HTMLCMenuItemElement;
        "c-modal": HTMLCModalElement;
        "c-navigationbutton": HTMLCNavigationbuttonElement;
        "c-notification": HTMLCNotificationElement;
        "c-pagination": HTMLCPaginationElement;
        "c-progress-bar": HTMLCProgressBarElement;
        "c-radio-group": HTMLCRadioGroupElement;
        "c-row": HTMLCRowElement;
        "c-select": HTMLCSelectElement;
        "c-sidenavigation": HTMLCSidenavigationElement;
        "c-sidenavigationitem": HTMLCSidenavigationitemElement;
        "c-spacer": HTMLCSpacerElement;
        "c-status": HTMLCStatusElement;
        "c-subnavigationitem": HTMLCSubnavigationitemElement;
        "c-swiper": HTMLCSwiperElement;
        "c-swiper-tab": HTMLCSwiperTabElement;
        "c-switch": HTMLCSwitchElement;
        "c-tab": HTMLCTabElement;
        "c-tab-buttons": HTMLCTabButtonsElement;
        "c-tabs": HTMLCTabsElement;
        "c-tag": HTMLCTagElement;
        "c-text-field": HTMLCTextFieldElement;
        "c-title": HTMLCTitleElement;
        "c-toast": HTMLCToastElement;
        "c-toasts": HTMLCToastsElement;
        "c-toolbar": HTMLCToolbarElement;
    }
}
declare namespace LocalJSX {
    interface CAccordion {
        /**
          * Disallow collapsing all the items
         */
        "mandatory"?: boolean;
        /**
          * Allow expanding multiple items
         */
        "multiple"?: boolean;
        /**
          * Emit changes to the parent
         */
        "onChangeValue"?: (event: CAccordionCustomEvent<number | string>) => void;
        /**
          * Show an outline around expanded items
         */
        "outlined"?: boolean;
        /**
          * Value of the accordion
         */
        "value": number | string | (number | string)[];
    }
    interface CAccordionItem {
        /**
          * Marks the item as collapsable
          * @private
         */
        "collapsable"?: boolean;
        /**
          * Expansion status of the item
         */
        "expanded"?: boolean;
        /**
          * Heading of the accordion item
         */
        "heading"?: string;
        /**
          * Icon
          * @deprecated Please use the icon slot instead
         */
        "icon"?: 'enabled' | 'disabled' | 'bell' | 'pending';
        /**
          * Emit changes to the c-accordion
          * @private
         */
        "onItemChange"?: (event: CAccordionItemCustomEvent<any>) => void;
        /**
          * Show an outline around the expanded item
          * @private
         */
        "outlined"?: boolean;
        /**
          * Value of the accordion item
         */
        "value"?: number | string;
    }
    interface CAlert {
        /**
          * Type of the alert
         */
        "type"?: CAlertType;
    }
    interface CAutocomplete {
        /**
          * Auto focus the input
         */
        "autofocus"?: boolean;
        /**
          * Dense variant
         */
        "dense"?: boolean;
        /**
          * Disable the input
         */
        "disabled"?: boolean;
        /**
          * Hide the hint and error messages
         */
        "hideDetails"?: boolean;
        /**
          * Hint text for the input
         */
        "hint"?: string;
        /**
          * Id of the element
         */
        "hostId"?: string;
        /**
          * Items to be selected
         */
        "items"?: CAutocompleteItem[];
        /**
          * Items per page before adding scroll
         */
        "itemsPerPage"?: number;
        /**
          * Element label
         */
        "label"?: string;
        /**
          * Input field name
         */
        "name"?: string;
        /**
          * Triggered when text is typed
         */
        "onChangeQuery"?: (event: CAutocompleteCustomEvent<any>) => void;
        /**
          * Triggered when an item is selected
         */
        "onChangeValue"?: (event: CAutocompleteCustomEvent<any>) => void;
        /**
          * Placeholder text
         */
        "placeholder"?: string;
        /**
          * Search string
         */
        "query"?: string;
        /**
          * Show required validation
         */
        "required"?: boolean;
        /**
          * Return only the item value rather than the whole item object
         */
        "returnValue"?: false;
        /**
          * Shadow variant
         */
        "shadow"?: boolean;
        /**
          * Set the validíty of the input
         */
        "valid"?: boolean;
        /**
          * Manual validation
         */
        "validate"?: boolean;
        /**
          * Validate the input on blur
         */
        "validateOnBlur"?: boolean;
        /**
          * Custom validation message
         */
        "validation"?: string;
        /**
          * Selected item
         */
        "value"?: string | number | CAutocompleteItem;
    }
    interface CButton {
        /**
          * Disable the button
         */
        "disabled"?: boolean;
        /**
          * Fit width to containing element
         */
        "fit"?: boolean;
        /**
          * Light button background
         */
        "ghost"?: boolean;
        /**
          * True when used as a tab button
          * @private
         */
        "grouped"?: boolean;
        /**
          * Id of the button
         */
        "hostId"?: string;
        /**
          * Hyperlink url
         */
        "href"?: string;
        /**
          * Name of the icon to be displayed in the button
          * @deprecated Please use the icon slot instead
         */
        "icon"?: 'plus' | 'minus' | 'account' | 'edit';
        /**
          * Inverted button style for dark backgrounds
         */
        "inverted"?: boolean;
        /**
          * Display loader on the button
         */
        "loading"?: boolean;
        /**
          * Remove the default border radius
         */
        "noRadius"?: boolean;
        /**
          * Emit changes to the parent
          * @private
         */
        "onTabChange"?: (event: CButtonCustomEvent<number | string>) => void;
        /**
          * Outlined button style
         */
        "outlined"?: boolean;
        /**
          * Path for the svg icon
         */
        "path"?: string;
        /**
          * Size of the button
         */
        "size"?: 'default' | 'small' | 'large';
        /**
          * Hyperlink target
         */
        "target"?: string;
        /**
          * Transparent button background
         */
        "text"?: boolean;
        /**
          * Button type
         */
        "type"?: 'button' | 'submit';
        /**
          * Value for the button - for use in the c-tab-buttons
         */
        "value"?: number | string;
    }
    interface CCard {
        /**
          * Card background image for login pages of specific services
         */
        "background"?: CardBackground;
        /**
          * Background color
         */
        "backgroundColor"?: string;
    }
    interface CCardActions {
        /**
          * Align the actions
         */
        "align"?: 'start' | 'center' | 'end';
        /**
          * Justify the actions
         */
        "justify"?: | 'start'
    | 'center'
    | 'end'
    | 'space-between'
    | 'stretch'
    | 'space-around';
    }
    interface CCardContent {
    }
    interface CCardTitle {
    }
    interface CCheckbox {
        /**
          * Disable the checkbox
         */
        "disabled"?: boolean;
        /**
          * Hide the hint and error messages
         */
        "hideDetails"?: boolean;
        /**
          * Hint text for the input
         */
        "hint"?: string;
        /**
          * Element label
         */
        "label"?: string;
        /**
          * Triggered when element is checked or unchecked
         */
        "onChangeValue"?: (event: CCheckboxCustomEvent<any>) => void;
        /**
          * Set the validíty of the input
         */
        "valid"?: boolean;
        /**
          * Custom validation message
         */
        "validation"?: string;
        /**
          * Is the element checked
         */
        "value"?: boolean;
    }
    interface CConsent {
    }
    interface CContainer {
        /**
          * Maximum width of container in pixels
         */
        "width"?: number;
    }
    interface CCscLogo {
        /**
          * Logo width in pixels
         */
        "width"?: number;
    }
    interface CDataTable {
        /**
          * Data of the table
         */
        "data"?: CDataTableData[];
        /**
          * Externally sorted and paginated data
         */
        "externalData"?: boolean;
        /**
          * Items per page options
         */
        "footerOptions"?: CDataTableFooterOptions;
        /**
          * Headers of the table
         */
        "headers"?: CDataTableHeader[];
        /**
          * Show a loader on top of the table
         */
        "loading"?: boolean;
        /**
          * Text shown when there is no data and the table is loading
         */
        "loadingText"?: string;
        /**
          * Text shown when there are no data available
         */
        "noDataText"?: string;
        /**
          * Triggered on row expansion
         */
        "onExpand"?: (event: CDataTableCustomEvent<any>) => void;
        /**
          * Triggered on pagination
         */
        "onPaginate"?: (event: CDataTableCustomEvent<CPaginationOptions>) => void;
        /**
          * Triggered on selection
         */
        "onSelection"?: (event: CDataTableCustomEvent<any>) => void;
        /**
          * Triggered on sort
         */
        "onSort"?: (event: CDataTableCustomEvent<any>) => void;
        /**
          * Pagination options
         */
        "pagination"?: CPaginationOptions;
        /**
          * Make rows selectable
         */
        "selectable"?: boolean;
        /**
          * Property used in selections
         */
        "selectionProperty"?: string;
        /**
          * Allow only a single row expanded at a time
         */
        "singleExpansion"?: boolean;
        /**
          * Sort data by
         */
        "sortBy"?: any;
        /**
          * Sorting direction
         */
        "sortDirection"?: 'asc' | 'desc' | null;
    }
    interface CFlex {
    }
    interface CIconButton {
        /**
          * Show a badge on top of the icon
         */
        "badge"?: string;
        /**
          * Disable the button
         */
        "disabled"?: boolean;
        /**
          * Ghost variant of the button
         */
        "ghost"?: boolean;
        /**
          * Inverted color for dark backgrounds
         */
        "inverted"?: boolean;
        /**
          * Outlined variant of the button
         */
        "outlined"?: boolean;
        /**
          * Path for the svg icon
         */
        "path"?: string;
        /**
          * Size of the button
         */
        "size"?: 'default' | 'x-small' | 'small';
        /**
          * Text variant of the button
         */
        "text"?: boolean;
    }
    interface CInput {
        /**
          * Auto focus the input
         */
        "autofocus"?: boolean;
        /**
          * Disable the input
         */
        "disabled"?: boolean;
        /**
          * Render a hidden input outside the shadow dom
         */
        "form"?: boolean;
        /**
          * Hide the hint and error messages
         */
        "hideDetails"?: boolean;
        /**
          * Hint text for the input
         */
        "hint"?: string;
        /**
          * Id of the input
         */
        "hostId"?: string;
        /**
          * Id of the input element
         */
        "inputId"?: string;
        /**
          * Label of the input
         */
        "label"?: string;
        /**
          * Maximum value on a numeric input
         */
        "max"?: number;
        /**
          * Minimum value on a numeric input
         */
        "min"?: number;
        /**
          * Name of the input
         */
        "name"?: string;
        /**
          * Numeric input
          * @deprecated Use type="number" instead
         */
        "number"?: boolean;
        /**
          * Emit changes to the parent
         */
        "onChangeValue"?: (event: CInputCustomEvent<any>) => void;
        /**
          * Placeholder of the input
         */
        "placeholder"?: string;
        /**
          * Mark as readonly
         */
        "readonly"?: boolean;
        /**
          * Set the input as required
         */
        "required"?: boolean;
        /**
          * Rows on the input
         */
        "rows"?: number;
        /**
          * Shadow variant of the input
         */
        "shadow"?: boolean;
        /**
          * Step size on a numeric input
         */
        "step"?: number;
        /**
          * Type of the input
         */
        "type"?: string;
        /**
          * Set the validíty of the input
         */
        "valid"?: boolean;
        /**
          * Manual validation
         */
        "validate"?: boolean;
        /**
          * Validate the input on blur
         */
        "validateOnBlur"?: boolean;
        /**
          * Custom validation message
         */
        "validation"?: string;
        /**
          * Value of the input
         */
        "value"?: string | number | boolean | CSelectItem | CAutocompleteItem;
        /**
          * Variant
         */
        "variant"?: 'text' | 'select';
    }
    interface CLink {
        /**
          * Url of link
         */
        "href"?: string;
        /**
          * regular target attribute of a hyperlink
         */
        "target"?: string;
        /**
          * Display line under the link
         */
        "underline"?: boolean;
    }
    interface CLoader {
        /**
          * Delay in seconds of showing the contents in the slot of the loader
         */
        "contentdelay"?: number;
        /**
          * Hide the loader
         */
        "hide"?: boolean;
        /**
          * Size of the loader
         */
        "size"?: number;
    }
    interface CLoginButton {
        /**
          * Alt description for logo
         */
        "alt"?: string;
        /**
          * Login provider link
         */
        "href"?: string;
        /**
          * Login provider logo url
         */
        "src"?: string;
    }
    interface CLoginButtons {
    }
    interface CLoginCard {
        /**
          * Background position (css background-position)
         */
        "backgroundPosition"?: string;
        /**
          * Mobile breakpoint in pixels
         */
        "mobileBreakpoint"?: number;
        /**
          * Add colored overlay to the background image
         */
        "overlay"?: boolean;
        /**
          * Add colored overlay to the background image
         */
        "overlayBlendMode"?: CLoginCardBlendMode;
        /**
          * Background image
         */
        "src"?: string;
    }
    interface CLoginCardActions {
        /**
          * Align the actions
         */
        "align"?: 'start' | 'center' | 'end';
        /**
          * Justify the actions
         */
        "justify"?: | 'start'
    | 'center'
    | 'end'
    | 'space-between'
    | 'stretch'
    | 'space-around';
    }
    interface CLoginCardContent {
    }
    interface CLoginCardTitle {
    }
    interface CMain {
    }
    interface CMenu {
        /**
          * Menu items
         */
        "items"?: {
    name: string;
    action: () => void;
    disabled?: boolean;
    icon?: string;
    iconPosition?: 'start' | 'end';
  }[];
        /**
          * No hover background
         */
        "nohover"?: boolean;
        /**
          * Simple variant without chevron and background, E.g. when a button is the activator
         */
        "simple"?: boolean;
        /**
          * Small variant
         */
        "small"?: boolean;
    }
    interface CMenuItem {
        /**
          * Is the item the active selection
         */
        "active"?: boolean;
        /**
          * Small variant
         */
        "small"?: boolean;
    }
    interface CModal {
        /**
          * Dismissed when touching/clicking outside the content
         */
        "dismissable"?: boolean;
        /**
          * Triggered when value is changed
         */
        "onChangeValue"?: (event: CModalCustomEvent<boolean>) => void;
        /**
          * Is the modal visible
         */
        "value"?: boolean;
        /**
          * Width of the dialog. Numeric value is considered as pixel value (400 -> 400px)
         */
        "width"?: string | number;
    }
    interface CNavigationbutton {
    }
    interface CNotification {
        /**
          * notification contents
         */
        "notification"?: {
    name: string;
    type: 'warning' | 'error' | 'success' | 'info';
    delay?: number;
    requiresClosing?: boolean;
  };
        /**
          * Position of the notifications
         */
        "position"?: 'fixed' | 'absolute';
    }
    interface CPagination {
        /**
          * Hide details (per page dropdown and the 'x - y of n pages' text)
         */
        "hideDetails"?: boolean;
        /**
          * Hide range indicator
         */
        "hideRange"?: boolean;
        /**
          * Items per page options
         */
        "itemsPerPageOptions"?: number[];
        /**
          * Triggered when values are changed
         */
        "onChangeValue"?: (event: CPaginationCustomEvent<CPaginationOptions>) => void;
        /**
          * Hide page number buttons
         */
        "simple"?: boolean;
        /**
          * Hide details (per page dropdown and the 'x - y of n pages' text)
         */
        "size"?: 'default' | 'small';
        /**
          * Object containing values that are needed for pagination.  Note! startFrom and endTo are assigned automatically to the object based on other values
         */
        "value"?: CPaginationOptions;
    }
    interface CProgressBar {
        /**
          * Color of the bar (valid css color)
          * @default var(--csc-primary)
         */
        "color"?: string;
        /**
          * Hide the percentage display
         */
        "hideDetails"?: boolean;
        /**
          * Indeterminate state of the progress bar
         */
        "indeterminate"?: boolean;
        /**
          * Optional details message next to percentage display
         */
        "label"?: string;
        /**
          * Place details next to progress bar
         */
        "singleLine"?: boolean;
        /**
          * Progress bar value in percentage (0 to 100)
         */
        "value"?: number;
    }
    interface CRadioGroup {
        /**
          * Color of the radio group
         */
        "color"?: string;
        /**
          * Disable the radio group
         */
        "disabled"?: boolean;
        /**
          * Hide the hint and error messages
         */
        "hideDetails"?: boolean;
        /**
          * Hint text for the input
         */
        "hint"?: string;
        /**
          * Display radio buttons inline
         */
        "inline"?: boolean;
        /**
          * Radio group items
         */
        "items"?: CRadioGroupItem[];
        /**
          * Label of the radio group
         */
        "label"?: string;
        /**
          * Emit value change to the parent
         */
        "onChangeValue"?: (event: CRadioGroupCustomEvent<any>) => void;
        /**
          * Return only the item value rather than the whole item object
         */
        "returnValue"?: false;
        /**
          * Set the validíty of the input
         */
        "valid"?: boolean;
        /**
          * Custom validation message
         */
        "validation"?: string;
        /**
          * Value of the radio group
         */
        "value"?: string | number | CRadioGroupItem;
    }
    interface CRow {
        /**
          * Align items vertically
         */
        "align"?: 'start' | 'center' | 'end';
        /**
          * Gap between items in px
         */
        "gap"?: number;
        /**
          * Justify content horizontally
         */
        "justify"?: | 'start'
    | 'center'
    | 'end'
    | 'space-between'
    | 'space-around';
        /**
          * Disable flex wrap
         */
        "nowrap"?: boolean;
    }
    interface CSelect {
        /**
          * Auto focus the input
         */
        "autofocus"?: boolean;
        /**
          * Disable the input
         */
        "disabled"?: boolean;
        /**
          * Hide the hint and error messages
         */
        "hideDetails"?: boolean;
        /**
          * Hint text for the input
         */
        "hint"?: string;
        /**
          * Id of the element
         */
        "hostId"?: string;
        /**
          * selectable items
         */
        "items"?: CSelectItem[];
        /**
          * Items per page before adding scroll
         */
        "itemsPerPage"?: number;
        /**
          * Element label
         */
        "label"?: string;
        /**
          * Input field name
         */
        "name"?: string;
        /**
          * Triggered when an item is selected
         */
        "onChangeValue"?: (event: CSelectCustomEvent<any>) => void;
        /**
          * Placeholder text
         */
        "placeholder"?: string;
        /**
          * Show required validation
         */
        "required"?: boolean;
        /**
          * Return only the item value rather than the whole item object
         */
        "returnValue"?: false;
        /**
          * Shadow variant
         */
        "shadow"?: boolean;
        /**
          * Set the validíty of the input
         */
        "valid"?: boolean;
        /**
          * Manual validation
         */
        "validate"?: boolean;
        /**
          * Validate the input on blur
         */
        "validateOnBlur"?: boolean;
        /**
          * Custom validation message
         */
        "validation"?: string;
        /**
          * Selected item
         */
        "value"?: string | number | boolean | CSelectItem;
    }
    interface CSidenavigation {
        /**
          * Mobile version menu visibility
         */
        "menuVisible"?: boolean;
        /**
          * Mobile version
         */
        "mobile"?: boolean;
    }
    interface CSidenavigationitem {
        /**
          * Indicate active state
         */
        "active"?: boolean;
        /**
          * Hyperlink url
         */
        "href"?: string;
        /**
          * Loading state
         */
        "loading"?: boolean;
        /**
          * Emit changes to the c-accordion
          * @private
         */
        "onItemChange"?: (event: CSidenavigationitemCustomEvent<any>) => void;
    }
    interface CSpacer {
    }
    interface CStatus {
        /**
          * Status type
         */
        "type"?: 'info' | 'warning' | 'error' | 'success';
    }
    interface CSubnavigationitem {
        /**
          * Active state
         */
        "active"?: boolean;
        /**
          * Element is visible and focusable
         */
        "focusable"?: boolean;
        /**
          * Link url
         */
        "href"?: string;
        /**
          * Loading state
         */
        "loading"?: boolean;
    }
    interface CSwiper {
        /**
          * Emit value change to the parent
         */
        "onChangeValue"?: (event: CSwiperCustomEvent<number | string>) => void;
        /**
          * Value of the swiper
         */
        "value"?: number | string;
    }
    interface CSwiperTab {
        /**
          * Mark as active
         */
        "active"?: boolean;
        /**
          * Disable button
         */
        "disabled"?: boolean;
        /**
          * Id of the button
         */
        "hostId"?: string;
        /**
          * Label of the button
         */
        "label"?: string;
        /**
          * Emit value change to the parent
          * @private
         */
        "onChangeValue"?: (event: CSwiperTabCustomEvent<number | string>) => void;
        /**
          * Position in the set
          * @private
         */
        "position"?: number;
        /**
          * Size of the set
          * @private
         */
        "setsize"?: number;
        /**
          * Value of the button
         */
        "value"?: number | string;
    }
    interface CSwitch {
        /**
          * Disable the switch
         */
        "hostDisabled"?: boolean;
        /**
          * Id for the element
         */
        "hostId"?: string;
        /**
          * Emit inner value change to parent
         */
        "onChangeValue"?: (event: CSwitchCustomEvent<boolean>) => void;
        /**
          * Value of the element
         */
        "value"?: boolean;
    }
    interface CTab {
        /**
          * Mark tab as active
         */
        "active"?: boolean;
        /**
          * Mark tab as disabled
         */
        "disabled"?: boolean;
        /**
          * Id of the tab
         */
        "hostId"?: string;
        /**
          * Emit changes to the parent
          * @private
         */
        "onTabChange"?: (event: CTabCustomEvent<any>) => void;
        /**
          * Position in the set
          * @private
         */
        "position"?: number;
        /**
          * Size of the set
          * @private
         */
        "setsize"?: number;
        /**
          * Value for the tab - for use in c-tabs
         */
        "value"?: number | string;
    }
    interface CTabButtons {
        /**
          * Disable tab buttons
         */
        "hostDisabled"?: boolean;
        /**
          * Always require a selection
         */
        "mandatory"?: boolean;
        /**
          * Emit changes to the parent
         */
        "onChangeValue"?: (event: CTabButtonsCustomEvent<number | string>) => void;
        /**
          * Size of the buttons
         */
        "size"?: 'default' | 'small';
        /**
          * Value of tab buttons
         */
        "value": number | string;
    }
    interface CTabs {
        /**
          * Disable the bottom border
         */
        "borderless"?: boolean;
        /**
          * Emit changes to the parent
         */
        "onChangeValue"?: (event: CTabsCustomEvent<any>) => void;
        /**
          * Currently active tab
         */
        "value": number | string;
    }
    interface CTag {
        /**
          * Mark tag as active
         */
        "active"?: boolean;
        /**
          * Display an optional badge at the start of the tag
         */
        "badge"?: string | number;
        /**
          * Mark tag as closeable
         */
        "closeable"?: boolean;
        /**
          * Stretch to fill the container
         */
        "fit"?: boolean;
        /**
          * Remove the hover effect
         */
        "flat"?: boolean;
    }
    interface CTextField {
        /**
          * Auto focus the input
         */
        "autofocus"?: boolean;
        /**
          * Disable the input
         */
        "disabled"?: boolean;
        /**
          * Hide the hint and error messages
         */
        "hideDetails"?: boolean;
        /**
          * Hint text for the input
         */
        "hint"?: string;
        /**
          * Id of the input
         */
        "hostId"?: string;
        /**
          * Label of the input
         */
        "label"?: string;
        /**
          * Maximum value on a numeric input
         */
        "max"?: number;
        /**
          * Minimum value on a numeric input
         */
        "min"?: number;
        /**
          * Name of the input
         */
        "name"?: string;
        /**
          * Numeric input
          * @deprecated Use type="number" instead
         */
        "number"?: boolean;
        /**
          * Emit changes to the parent
         */
        "onChangeValue"?: (event: CTextFieldCustomEvent<any>) => void;
        /**
          * Placeholder of the input
         */
        "placeholder"?: string;
        /**
          * Mark as readonly
         */
        "readonly"?: boolean;
        /**
          * Set the input as required
         */
        "required"?: boolean;
        /**
          * Rows on the input
         */
        "rows"?: number;
        /**
          * Shadow variant of the input
         */
        "shadow"?: boolean;
        /**
          * Step size on a numeric input
         */
        "step"?: number;
        /**
          * Trim whitespace from the return value
         */
        "trimWhitespace"?: boolean;
        /**
          * Type of the input
         */
        "type"?: string;
        /**
          * Set the validíty of the input
         */
        "valid"?: boolean;
        /**
          * Manual validation
         */
        "validate"?: boolean;
        /**
          * Validate the input on blur
         */
        "validateOnBlur"?: boolean;
        /**
          * Custom validation message
         */
        "validation"?: string;
        /**
          * Value of the input
         */
        "value"?: string;
    }
    interface CTitle {
    }
    interface CToast {
        /**
          * Messages
         */
        "message"?: CToastMessage;
        /**
          * Emit inner value change to parent
         */
        "onClose"?: (event: CToastCustomEvent<CToastMessage>) => void;
    }
    interface CToasts {
        /**
          * Use absolute positioning
         */
        "absolute"?: boolean;
        /**
          * Horizontal position
         */
        "horizontal"?: 'left' | 'center' | 'right';
        /**
          * Vertical position
         */
        "vertical"?: 'top' | 'bottom';
    }
    interface CToolbar {
    }
    interface IntrinsicElements {
        "c-accordion": CAccordion;
        "c-accordion-item": CAccordionItem;
        "c-alert": CAlert;
        "c-autocomplete": CAutocomplete;
        "c-button": CButton;
        "c-card": CCard;
        "c-card-actions": CCardActions;
        "c-card-content": CCardContent;
        "c-card-title": CCardTitle;
        "c-checkbox": CCheckbox;
        "c-consent": CConsent;
        "c-container": CContainer;
        "c-csc-logo": CCscLogo;
        "c-data-table": CDataTable;
        "c-flex": CFlex;
        "c-icon-button": CIconButton;
        "c-input": CInput;
        "c-link": CLink;
        "c-loader": CLoader;
        "c-login-button": CLoginButton;
        "c-login-buttons": CLoginButtons;
        "c-login-card": CLoginCard;
        "c-login-card-actions": CLoginCardActions;
        "c-login-card-content": CLoginCardContent;
        "c-login-card-title": CLoginCardTitle;
        "c-main": CMain;
        "c-menu": CMenu;
        "c-menu-item": CMenuItem;
        "c-modal": CModal;
        "c-navigationbutton": CNavigationbutton;
        "c-notification": CNotification;
        "c-pagination": CPagination;
        "c-progress-bar": CProgressBar;
        "c-radio-group": CRadioGroup;
        "c-row": CRow;
        "c-select": CSelect;
        "c-sidenavigation": CSidenavigation;
        "c-sidenavigationitem": CSidenavigationitem;
        "c-spacer": CSpacer;
        "c-status": CStatus;
        "c-subnavigationitem": CSubnavigationitem;
        "c-swiper": CSwiper;
        "c-swiper-tab": CSwiperTab;
        "c-switch": CSwitch;
        "c-tab": CTab;
        "c-tab-buttons": CTabButtons;
        "c-tabs": CTabs;
        "c-tag": CTag;
        "c-text-field": CTextField;
        "c-title": CTitle;
        "c-toast": CToast;
        "c-toasts": CToasts;
        "c-toolbar": CToolbar;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "c-accordion": LocalJSX.CAccordion & JSXBase.HTMLAttributes<HTMLCAccordionElement>;
            "c-accordion-item": LocalJSX.CAccordionItem & JSXBase.HTMLAttributes<HTMLCAccordionItemElement>;
            "c-alert": LocalJSX.CAlert & JSXBase.HTMLAttributes<HTMLCAlertElement>;
            "c-autocomplete": LocalJSX.CAutocomplete & JSXBase.HTMLAttributes<HTMLCAutocompleteElement>;
            "c-button": LocalJSX.CButton & JSXBase.HTMLAttributes<HTMLCButtonElement>;
            "c-card": LocalJSX.CCard & JSXBase.HTMLAttributes<HTMLCCardElement>;
            "c-card-actions": LocalJSX.CCardActions & JSXBase.HTMLAttributes<HTMLCCardActionsElement>;
            "c-card-content": LocalJSX.CCardContent & JSXBase.HTMLAttributes<HTMLCCardContentElement>;
            "c-card-title": LocalJSX.CCardTitle & JSXBase.HTMLAttributes<HTMLCCardTitleElement>;
            "c-checkbox": LocalJSX.CCheckbox & JSXBase.HTMLAttributes<HTMLCCheckboxElement>;
            "c-consent": LocalJSX.CConsent & JSXBase.HTMLAttributes<HTMLCConsentElement>;
            "c-container": LocalJSX.CContainer & JSXBase.HTMLAttributes<HTMLCContainerElement>;
            "c-csc-logo": LocalJSX.CCscLogo & JSXBase.HTMLAttributes<HTMLCCscLogoElement>;
            "c-data-table": LocalJSX.CDataTable & JSXBase.HTMLAttributes<HTMLCDataTableElement>;
            "c-flex": LocalJSX.CFlex & JSXBase.HTMLAttributes<HTMLCFlexElement>;
            "c-icon-button": LocalJSX.CIconButton & JSXBase.HTMLAttributes<HTMLCIconButtonElement>;
            "c-input": LocalJSX.CInput & JSXBase.HTMLAttributes<HTMLCInputElement>;
            "c-link": LocalJSX.CLink & JSXBase.HTMLAttributes<HTMLCLinkElement>;
            "c-loader": LocalJSX.CLoader & JSXBase.HTMLAttributes<HTMLCLoaderElement>;
            "c-login-button": LocalJSX.CLoginButton & JSXBase.HTMLAttributes<HTMLCLoginButtonElement>;
            "c-login-buttons": LocalJSX.CLoginButtons & JSXBase.HTMLAttributes<HTMLCLoginButtonsElement>;
            "c-login-card": LocalJSX.CLoginCard & JSXBase.HTMLAttributes<HTMLCLoginCardElement>;
            "c-login-card-actions": LocalJSX.CLoginCardActions & JSXBase.HTMLAttributes<HTMLCLoginCardActionsElement>;
            "c-login-card-content": LocalJSX.CLoginCardContent & JSXBase.HTMLAttributes<HTMLCLoginCardContentElement>;
            "c-login-card-title": LocalJSX.CLoginCardTitle & JSXBase.HTMLAttributes<HTMLCLoginCardTitleElement>;
            "c-main": LocalJSX.CMain & JSXBase.HTMLAttributes<HTMLCMainElement>;
            "c-menu": LocalJSX.CMenu & JSXBase.HTMLAttributes<HTMLCMenuElement>;
            "c-menu-item": LocalJSX.CMenuItem & JSXBase.HTMLAttributes<HTMLCMenuItemElement>;
            "c-modal": LocalJSX.CModal & JSXBase.HTMLAttributes<HTMLCModalElement>;
            "c-navigationbutton": LocalJSX.CNavigationbutton & JSXBase.HTMLAttributes<HTMLCNavigationbuttonElement>;
            "c-notification": LocalJSX.CNotification & JSXBase.HTMLAttributes<HTMLCNotificationElement>;
            "c-pagination": LocalJSX.CPagination & JSXBase.HTMLAttributes<HTMLCPaginationElement>;
            "c-progress-bar": LocalJSX.CProgressBar & JSXBase.HTMLAttributes<HTMLCProgressBarElement>;
            "c-radio-group": LocalJSX.CRadioGroup & JSXBase.HTMLAttributes<HTMLCRadioGroupElement>;
            "c-row": LocalJSX.CRow & JSXBase.HTMLAttributes<HTMLCRowElement>;
            "c-select": LocalJSX.CSelect & JSXBase.HTMLAttributes<HTMLCSelectElement>;
            "c-sidenavigation": LocalJSX.CSidenavigation & JSXBase.HTMLAttributes<HTMLCSidenavigationElement>;
            "c-sidenavigationitem": LocalJSX.CSidenavigationitem & JSXBase.HTMLAttributes<HTMLCSidenavigationitemElement>;
            "c-spacer": LocalJSX.CSpacer & JSXBase.HTMLAttributes<HTMLCSpacerElement>;
            "c-status": LocalJSX.CStatus & JSXBase.HTMLAttributes<HTMLCStatusElement>;
            "c-subnavigationitem": LocalJSX.CSubnavigationitem & JSXBase.HTMLAttributes<HTMLCSubnavigationitemElement>;
            "c-swiper": LocalJSX.CSwiper & JSXBase.HTMLAttributes<HTMLCSwiperElement>;
            "c-swiper-tab": LocalJSX.CSwiperTab & JSXBase.HTMLAttributes<HTMLCSwiperTabElement>;
            "c-switch": LocalJSX.CSwitch & JSXBase.HTMLAttributes<HTMLCSwitchElement>;
            "c-tab": LocalJSX.CTab & JSXBase.HTMLAttributes<HTMLCTabElement>;
            "c-tab-buttons": LocalJSX.CTabButtons & JSXBase.HTMLAttributes<HTMLCTabButtonsElement>;
            "c-tabs": LocalJSX.CTabs & JSXBase.HTMLAttributes<HTMLCTabsElement>;
            "c-tag": LocalJSX.CTag & JSXBase.HTMLAttributes<HTMLCTagElement>;
            "c-text-field": LocalJSX.CTextField & JSXBase.HTMLAttributes<HTMLCTextFieldElement>;
            "c-title": LocalJSX.CTitle & JSXBase.HTMLAttributes<HTMLCTitleElement>;
            "c-toast": LocalJSX.CToast & JSXBase.HTMLAttributes<HTMLCToastElement>;
            "c-toasts": LocalJSX.CToasts & JSXBase.HTMLAttributes<HTMLCToastsElement>;
            "c-toolbar": LocalJSX.CToolbar & JSXBase.HTMLAttributes<HTMLCToolbarElement>;
        }
    }
}
